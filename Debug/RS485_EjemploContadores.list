
RS485_EjemploContadores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002210  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800231c  0800231c  0000331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002348  08002348  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002348  08002348  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002348  08002348  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800234c  0800234c  0000334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002350  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  0800235c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  0800235c  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007765  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176d  00000000  00000000  0000b79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052a  00000000  00000000  0000d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167f3  00000000  00000000  0000dafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008705  00000000  00000000  000242ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fae3  00000000  00000000  0002c9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac4d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f8  00000000  00000000  000ac518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000adf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002304 	.word	0x08002304

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002304 	.word	0x08002304

0800014c <HAL_UART_ErrorCallback>:

void HAL_UART_txCptlCallback(UART_HandleTypeDef *huart){

}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart,(uint8_t*)&rxValue_aux,sizeof(uint32_t));
 8000154:	2204      	movs	r2, #4
 8000156:	4904      	ldr	r1, [pc, #16]	@ (8000168 <HAL_UART_ErrorCallback+0x1c>)
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f001 fb18 	bl	800178e <HAL_UART_Receive_IT>
	//en caso de error vuelve a habilitar la recepción
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	20000028 	.word	0x20000028

0800016c <_rs485_set_mode>:

/*RS485*/
void _rs485_set_mode(rs485_mode_e mode){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
	//funcion que establece el modo de transmisión
	switch(mode){
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d002      	beq.n	8000182 <_rs485_set_mode+0x16>
 800017c:	2b01      	cmp	r3, #1
 800017e:	d007      	beq.n	8000190 <_rs485_set_mode+0x24>
	case RS485_MODE_RECEIVE:
		HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin,GPIO_PIN_RESET);
		break;
	}

}
 8000180:	e00d      	b.n	800019e <_rs485_set_mode+0x32>
		HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin,GPIO_PIN_SET);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000188:	4807      	ldr	r0, [pc, #28]	@ (80001a8 <_rs485_set_mode+0x3c>)
 800018a:	f000 fdfd 	bl	8000d88 <HAL_GPIO_WritePin>
		break;
 800018e:	e006      	b.n	800019e <_rs485_set_mode+0x32>
		HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin,GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000196:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <_rs485_set_mode+0x3c>)
 8000198:	f000 fdf6 	bl	8000d88 <HAL_GPIO_WritePin>
		break;
 800019c:	bf00      	nop
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <_rs485_write32>:

void _rs485_write32(uint32_t Value){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	_rs485_set_mode(RS485_MODE_TRANSMIT);
 80001b4:	2000      	movs	r0, #0
 80001b6:	f7ff ffd9 	bl	800016c <_rs485_set_mode>
	// Considera un pequeño delay aquí si tienes problemas de latencia al cambiar DE
	// HAL_Delay(1); // Descomentar si es necesario, especialmente para transceivers lentos
	HAL_UART_Transmit(&huart1,(uint8_t*)&Value,sizeof(uint32_t),20);
 80001ba:	1d39      	adds	r1, r7, #4
 80001bc:	2314      	movs	r3, #20
 80001be:	2204      	movs	r2, #4
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <_rs485_write32+0x28>)
 80001c2:	f001 fa59 	bl	8001678 <HAL_UART_Transmit>
	_rs485_set_mode(RS485_MODE_RECEIVE); // Siempre vuelve a recibir después de una transmisión
 80001c6:	2001      	movs	r0, #1
 80001c8:	f7ff ffd0 	bl	800016c <_rs485_set_mode>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	2000003c 	.word	0x2000003c

080001d8 <_rs485_init>:

// --- FUNCIÓN _rs485_init() CORREGIDA ---
void _rs485_init(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	txvalue=0;
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <_rs485_init+0x20>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
	// Cambiamos el modo inicial a TRANSMITIR
	_rs485_set_mode(RS485_MODE_TRANSMIT); // <--- CAMBIO AQUÍ
 80001e2:	2000      	movs	r0, #0
 80001e4:	f7ff ffc2 	bl	800016c <_rs485_set_mode>
    // Luego volver al modo RECEIVE si la comunicación es semidúplex y no estás transmitiendo constantemente
    // _rs485_set_mode(RS485_MODE_RECEIVE); // Si solo quieres iniciar en TX y luego operar normalmente

    // Si quieres iniciar en TX para enviar un primer mensaje y luego pasar a RX para recibir normalmente
    // después de la inicialización completa:
    HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxValue_aux,sizeof(uint32_t)); // Habilitar la recepción por interrupción
 80001e8:	2204      	movs	r2, #4
 80001ea:	4904      	ldr	r1, [pc, #16]	@ (80001fc <_rs485_init+0x24>)
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <_rs485_init+0x28>)
 80001ee:	f001 face 	bl	800178e <HAL_UART_Receive_IT>

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	20000028 	.word	0x20000028
 8000200:	2000003c 	.word	0x2000003c

08000204 <app_main>:
// --- FIN DE LA FUNCIÓN _rs485_init() CORREGIDA ---

void app_main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	HAL_Delay(200);
 8000208:	20c8      	movs	r0, #200	@ 0xc8
 800020a:	f000 fa5d 	bl	80006c8 <HAL_Delay>
	_rs485_init(); // Ahora _rs485_init() pondrá el transceptor en modo TRANSMIT
 800020e:	f7ff ffe3 	bl	80001d8 <_rs485_init>


	Tick1000=HAL_GetTick();
 8000212:	f000 fa4f 	bl	80006b4 <HAL_GetTick>
 8000216:	4603      	mov	r3, r0
 8000218:	4a20      	ldr	r2, [pc, #128]	@ (800029c <app_main+0x98>)
 800021a:	6013      	str	r3, [r2, #0]
	while(1){
		if((HAL_GetTick()-Tick1000)>1000){
 800021c:	f000 fa4a 	bl	80006b4 <HAL_GetTick>
 8000220:	4602      	mov	r2, r0
 8000222:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <app_main+0x98>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800022c:	d90e      	bls.n	800024c <app_main+0x48>
			Tick1000=HAL_GetTick();
 800022e:	f000 fa41 	bl	80006b4 <HAL_GetTick>
 8000232:	4603      	mov	r3, r0
 8000234:	4a19      	ldr	r2, [pc, #100]	@ (800029c <app_main+0x98>)
 8000236:	6013      	str	r3, [r2, #0]
			txvalue++;
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <app_main+0x9c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <app_main+0x9c>)
 8000240:	6013      	str	r3, [r2, #0]
			_rs485_write32(txvalue); // Esta función ya gestiona el cambio a TX y luego a RX
 8000242:	4b17      	ldr	r3, [pc, #92]	@ (80002a0 <app_main+0x9c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f7ff ffb0 	bl	80001ac <_rs485_write32>
		}
		if(Rs485_Conn==1 && (HAL_GetTick()-ConnTimeOut)>1500){
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <app_main+0xa0>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d10c      	bne.n	800026e <app_main+0x6a>
 8000254:	f000 fa2e 	bl	80006b4 <HAL_GetTick>
 8000258:	4602      	mov	r2, r0
 800025a:	4b13      	ldr	r3, [pc, #76]	@ (80002a8 <app_main+0xa4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000264:	4293      	cmp	r3, r2
 8000266:	d902      	bls.n	800026e <app_main+0x6a>
			//para detectar si la comunicación cayó
			//los datos se envian cada segundo
			//si desde la ultima recepción ha pasado más de un segundo
			//quiere decir que la comunicación cayó
			Rs485_Conn=0;
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <app_main+0xa0>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
		}

		if(flagRx==1){
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <app_main+0xa8>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d1d2      	bne.n	800021c <app_main+0x18>
			flagRx=0;
 8000276:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <app_main+0xa8>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(50);
 800027c:	2032      	movs	r0, #50	@ 0x32
 800027e:	f000 fa23 	bl	80006c8 <HAL_Delay>

			HAL_GPIO_WritePin(LED_RX_GPIO_Port,LED_RX_Pin,GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2101      	movs	r1, #1
 8000286:	480a      	ldr	r0, [pc, #40]	@ (80002b0 <app_main+0xac>)
 8000288:	f000 fd7e 	bl	8000d88 <HAL_GPIO_WritePin>
			if(Rs485_Conn==0){
 800028c:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <app_main+0xa0>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c3      	bne.n	800021c <app_main+0x18>
				Rs485_Conn=1;
 8000294:	4b03      	ldr	r3, [pc, #12]	@ (80002a4 <app_main+0xa0>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick()-Tick1000)>1000){
 800029a:	e7bf      	b.n	800021c <app_main+0x18>
 800029c:	20000038 	.word	0x20000038
 80002a0:	2000002c 	.word	0x2000002c
 80002a4:	20000031 	.word	0x20000031
 80002a8:	20000034 	.word	0x20000034
 80002ac:	20000030 	.word	0x20000030
 80002b0:	40010800 	.word	0x40010800

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 f9a4 	bl	8000604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f808 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f870 	bl	80003a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002c4:	f000 f844 	bl	8000350 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80002c8:	f7ff ff9c 	bl	8000204 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <main+0x18>

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ffe4 	bl	80022ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000302:	2300      	movs	r3, #0
 8000304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000306:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fd51 	bl	8000db8 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800031c:	f000 f884 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	230f      	movs	r3, #15
 8000322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	2302      	movs	r3, #2
 8000326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f000 ffbf 	bl	80012bc <HAL_RCC_ClockConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000344:	f000 f870 	bl	8000428 <Error_Handler>
  }
}
 8000348:	bf00      	nop
 800034a:	3740      	adds	r7, #64	@ 0x40
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <MX_USART1_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800035a:	4b10      	ldr	r3, [pc, #64]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 800035c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_USART1_UART_Init+0x4c>)
 8000388:	f001 f926 	bl	80015d8 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 f849 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	40013800 	.word	0x40013800

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <MX_GPIO_Init+0x7c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a18      	ldr	r2, [pc, #96]	@ (8000420 <MX_GPIO_Init+0x7c>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <MX_GPIO_Init+0x7c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RX_Pin|RS485_DE_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f240 1101 	movw	r1, #257	@ 0x101
 80003d6:	4813      	ldr	r0, [pc, #76]	@ (8000424 <MX_GPIO_Init+0x80>)
 80003d8:	f000 fcd6 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 80003dc:	2301      	movs	r3, #1
 80003de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	480c      	ldr	r0, [pc, #48]	@ (8000424 <MX_GPIO_Init+0x80>)
 80003f4:	f000 fb4c 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_DE_Pin;
 80003f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000406:	2303      	movs	r3, #3
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_GPIO_Init+0x80>)
 8000412:	f000 fb3d 	bl	8000a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <Error_Handler+0x8>

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	@ (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a20      	ldr	r2, [pc, #128]	@ (8000534 <HAL_UART_MspInit+0x9c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d139      	bne.n	800052c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a18      	ldr	r2, [pc, #96]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <HAL_UART_MspInit+0xa0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480f      	ldr	r0, [pc, #60]	@ (800053c <HAL_UART_MspInit+0xa4>)
 80004fe:	f000 fac7 	bl	8000a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000502:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <HAL_UART_MspInit+0xa4>)
 8000518:	f000 faba 	bl	8000a90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2025      	movs	r0, #37	@ 0x25
 8000522:	f000 f9cc 	bl	80008be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000526:	2025      	movs	r0, #37	@ 0x25
 8000528:	f000 f9e5 	bl	80008f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40013800 	.word	0x40013800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <NMI_Handler+0x4>

08000548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <MemManage_Handler+0x4>

08000558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <UsageFault_Handler+0x4>

08000568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f87e 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800059c:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <USART1_IRQHandler+0x10>)
 800059e:	f001 f91b 	bl	80017d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000003c 	.word	0x2000003c

080005ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b8:	f7ff fff8 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005be:	490c      	ldr	r1, [pc, #48]	@ (80005f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c0:	4a0c      	ldr	r2, [pc, #48]	@ (80005f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d4:	4c09      	ldr	r4, [pc, #36]	@ (80005fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e2:	f001 fe6b 	bl	80022bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff fe65 	bl	80002b4 <main>
  bx lr
 80005ea:	4770      	bx	lr
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08002350 	.word	0x08002350
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	20000088 	.word	0x20000088

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	@ (800062c <HAL_Init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	@ (800062c <HAL_Init+0x28>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f947 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	200f      	movs	r0, #15
 800061c:	f000 f808 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f7ff ff08 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_InitTick+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_InitTick+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000646:	fbb3 f3f1 	udiv	r3, r3, r1
 800064a:	fbb2 f3f3 	udiv	r3, r2, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f95f 	bl	8000912 <HAL_SYSTICK_Config>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e00e      	b.n	800067c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d80a      	bhi.n	800067a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 f927 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4a06      	ldr	r2, [pc, #24]	@ (800068c <HAL_InitTick+0x5c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_IncTick+0x1c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <HAL_IncTick+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a03      	ldr	r2, [pc, #12]	@ (80006b0 <HAL_IncTick+0x20>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000084 	.word	0x20000084

080006b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	@ (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000084 	.word	0x20000084

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff fff0 	bl	80006b4 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <HAL_Delay+0x44>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ee:	bf00      	nop
 80006f0:	f7ff ffe0 	bl	80006b4 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4906      	ldr	r1, [pc, #24]	@ (80007a8 <__NVIC_EnableIRQ+0x34>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	@ (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	@ (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	@ 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	@ 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff90 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff2d 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff42 	bl	8000758 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff90 	bl	8000800 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5f 	bl	80007ac <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff35 	bl	8000774 <__NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffa2 	bl	8000864 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d008      	beq.n	8000954 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2204      	movs	r2, #4
 8000946:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e020      	b.n	8000996 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 020e 	bic.w	r2, r2, #14
 8000962:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000994:	7bfb      	ldrb	r3, [r7, #15]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d005      	beq.n	80009c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2204      	movs	r2, #4
 80009bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e051      	b.n	8000a68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 020e 	bic.w	r2, r2, #14
 80009d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 0201 	bic.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <HAL_DMA_Abort_IT+0xd4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d029      	beq.n	8000a42 <HAL_DMA_Abort_IT+0xa2>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <HAL_DMA_Abort_IT+0xd8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d022      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x9e>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <HAL_DMA_Abort_IT+0xdc>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x98>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <HAL_DMA_Abort_IT+0xe0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d012      	beq.n	8000a32 <HAL_DMA_Abort_IT+0x92>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <HAL_DMA_Abort_IT+0xe4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d00a      	beq.n	8000a2c <HAL_DMA_Abort_IT+0x8c>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <HAL_DMA_Abort_IT+0xe8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d102      	bne.n	8000a26 <HAL_DMA_Abort_IT+0x86>
 8000a20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a24:	e00e      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a2a:	e00b      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a30:	e008      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a36:	e005      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3c:	e002      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	2310      	movs	r3, #16
 8000a40:	e000      	b.n	8000a44 <HAL_DMA_Abort_IT+0xa4>
 8000a42:	2301      	movs	r3, #1
 8000a44:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_DMA_Abort_IT+0xec>)
 8000a46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	4798      	blx	r3
    } 
  }
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40020008 	.word	0x40020008
 8000a78:	4002001c 	.word	0x4002001c
 8000a7c:	40020030 	.word	0x40020030
 8000a80:	40020044 	.word	0x40020044
 8000a84:	40020058 	.word	0x40020058
 8000a88:	4002006c 	.word	0x4002006c
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b08b      	sub	sp, #44	@ 0x2c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e161      	b.n	8000d68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 8150 	bne.w	8000d62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a97      	ldr	r2, [pc, #604]	@ (8000d24 <HAL_GPIO_Init+0x294>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d05e      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000acc:	4a95      	ldr	r2, [pc, #596]	@ (8000d24 <HAL_GPIO_Init+0x294>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d875      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ad2:	4a95      	ldr	r2, [pc, #596]	@ (8000d28 <HAL_GPIO_Init+0x298>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d058      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ad8:	4a93      	ldr	r2, [pc, #588]	@ (8000d28 <HAL_GPIO_Init+0x298>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d86f      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000ade:	4a93      	ldr	r2, [pc, #588]	@ (8000d2c <HAL_GPIO_Init+0x29c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d052      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000ae4:	4a91      	ldr	r2, [pc, #580]	@ (8000d2c <HAL_GPIO_Init+0x29c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d869      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000aea:	4a91      	ldr	r2, [pc, #580]	@ (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d04c      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000af0:	4a8f      	ldr	r2, [pc, #572]	@ (8000d30 <HAL_GPIO_Init+0x2a0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d863      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000af6:	4a8f      	ldr	r2, [pc, #572]	@ (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d046      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
 8000afc:	4a8d      	ldr	r2, [pc, #564]	@ (8000d34 <HAL_GPIO_Init+0x2a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d85d      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d82a      	bhi.n	8000b5c <HAL_GPIO_Init+0xcc>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d859      	bhi.n	8000bbe <HAL_GPIO_Init+0x12e>
 8000b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b10 <HAL_GPIO_Init+0x80>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b65 	.word	0x08000b65
 8000b18:	08000b77 	.word	0x08000b77
 8000b1c:	08000bb9 	.word	0x08000bb9
 8000b20:	08000bbf 	.word	0x08000bbf
 8000b24:	08000bbf 	.word	0x08000bbf
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000bbf 	.word	0x08000bbf
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000bbf 	.word	0x08000bbf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bbf 	.word	0x08000bbf
 8000b40:	08000bbf 	.word	0x08000bbf
 8000b44:	08000bbf 	.word	0x08000bbf
 8000b48:	08000bbf 	.word	0x08000bbf
 8000b4c:	08000bbf 	.word	0x08000bbf
 8000b50:	08000bbf 	.word	0x08000bbf
 8000b54:	08000b6d 	.word	0x08000b6d
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	4a76      	ldr	r2, [pc, #472]	@ (8000d38 <HAL_GPIO_Init+0x2a8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b62:	e02c      	b.n	8000bbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e029      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e024      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e01f      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	330c      	adds	r3, #12
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e01a      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b92:	2304      	movs	r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e013      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d105      	bne.n	8000bac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	611a      	str	r2, [r3, #16]
          break;
 8000baa:	e009      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	615a      	str	r2, [r3, #20]
          break;
 8000bb6:	e003      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e000      	b.n	8000bc0 <HAL_GPIO_Init+0x130>
          break;
 8000bbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	@ 0xff
 8000bc4:	d801      	bhi.n	8000bca <HAL_GPIO_Init+0x13a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e001      	b.n	8000bce <HAL_GPIO_Init+0x13e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	@ 0xff
 8000bd4:	d802      	bhi.n	8000bdc <HAL_GPIO_Init+0x14c>
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x152>
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	3b08      	subs	r3, #8
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	210f      	movs	r1, #15
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	6a39      	ldr	r1, [r7, #32]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80a9 	beq.w	8000d62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c10:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a49      	ldr	r2, [pc, #292]	@ (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <HAL_GPIO_Init+0x2ac>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c28:	4a45      	ldr	r2, [pc, #276]	@ (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d44 <HAL_GPIO_Init+0x2b4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3c      	ldr	r2, [pc, #240]	@ (8000d48 <HAL_GPIO_Init+0x2b8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1dc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d4c <HAL_GPIO_Init+0x2bc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c70:	2300      	movs	r3, #0
 8000c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c82:	492f      	ldr	r1, [pc, #188]	@ (8000d40 <HAL_GPIO_Init+0x2b0>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	492b      	ldr	r1, [pc, #172]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4927      	ldr	r1, [pc, #156]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	4921      	ldr	r1, [pc, #132]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60cb      	str	r3, [r1, #12]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	491d      	ldr	r1, [pc, #116]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4917      	ldr	r1, [pc, #92]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4913      	ldr	r1, [pc, #76]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01f      	beq.n	8000d54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <HAL_GPIO_Init+0x2c0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	e01f      	b.n	8000d62 <HAL_GPIO_Init+0x2d2>
 8000d22:	bf00      	nop
 8000d24:	10320000 	.word	0x10320000
 8000d28:	10310000 	.word	0x10310000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	10210000 	.word	0x10210000
 8000d34:	10120000 	.word	0x10120000
 8000d38:	10110000 	.word	0x10110000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4909      	ldr	r1, [pc, #36]	@ (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f47f ae96 	bne.w	8000aa4 <HAL_GPIO_Init+0x14>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	372c      	adds	r7, #44	@ 0x2c
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000da4:	e003      	b.n	8000dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	041a      	lsls	r2, r3, #16
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e272      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4b8f      	ldr	r3, [pc, #572]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d112      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
 8000df0:	4b8c      	ldr	r3, [pc, #560]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b89      	ldr	r3, [pc, #548]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d06c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d168      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e24c      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x76>
 8000e20:	4b80      	ldr	r3, [pc, #512]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7f      	ldr	r2, [pc, #508]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e02e      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x98>
 8000e36:	4b7b      	ldr	r3, [pc, #492]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b78      	ldr	r3, [pc, #480]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a77      	ldr	r2, [pc, #476]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e01d      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0xbc>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a71      	ldr	r2, [pc, #452]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e74:	4b6b      	ldr	r3, [pc, #428]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b68      	ldr	r3, [pc, #416]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a67      	ldr	r2, [pc, #412]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc0e 	bl	80006b4 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fc0a 	bl	80006b4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e200      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	4b5d      	ldr	r3, [pc, #372]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0xe4>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fbfa 	bl	80006b4 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fbf6 	bl	80006b4 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e1ec      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b53      	ldr	r3, [pc, #332]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x10c>
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d063      	beq.n	8000fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
 8000f0a:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	4b43      	ldr	r3, [pc, #268]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e1c0      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4939      	ldr	r1, [pc, #228]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e03a      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fbaf 	bl	80006b4 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fbab 	bl	80006b4 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e1a1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4927      	ldr	r1, [pc, #156]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb8e 	bl	80006b4 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fb8a 	bl	80006b4 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e180      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03a      	beq.n	800103c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d019      	beq.n	8001002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fb6e 	bl	80006b4 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fb6a 	bl	80006b4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e160      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 face 	bl	800159c <RCC_Delay>
 8001000:	e01c      	b.n	800103c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fb54 	bl	80006b4 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100e:	e00f      	b.n	8001030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fb50 	bl	80006b4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d908      	bls.n	8001030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e146      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	42420000 	.word	0x42420000
 800102c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a6 	beq.w	8001196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104e:	4b8b      	ldr	r3, [pc, #556]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b88      	ldr	r3, [pc, #544]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a87      	ldr	r2, [pc, #540]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b85      	ldr	r3, [pc, #532]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b82      	ldr	r3, [pc, #520]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7e      	ldr	r2, [pc, #504]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb11 	bl	80006b4 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fb0d 	bl	80006b4 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	@ 0x64
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e103      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	4b75      	ldr	r3, [pc, #468]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x312>
 80010bc:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e02d      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x334>
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a69      	ldr	r2, [pc, #420]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b67      	ldr	r3, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a66      	ldr	r2, [pc, #408]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	e01c      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x356>
 80010f4:	4b61      	ldr	r3, [pc, #388]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a60      	ldr	r2, [pc, #384]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4a5d      	ldr	r2, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6213      	str	r3, [r2, #32]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 800110e:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a5a      	ldr	r2, [pc, #360]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a57      	ldr	r2, [pc, #348]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 0304 	bic.w	r3, r3, #4
 8001124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d015      	beq.n	800115a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fac1 	bl	80006b4 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fabd 	bl	80006b4 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0b1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ee      	beq.n	8001136 <HAL_RCC_OscConfig+0x37e>
 8001158:	e014      	b.n	8001184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff faab 	bl	80006b4 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff faa7 	bl	80006b4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e09b      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	4b40      	ldr	r3, [pc, #256]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d105      	bne.n	8001196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	4b36      	ldr	r3, [pc, #216]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d061      	beq.n	8001270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d146      	bne.n	8001242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fa7b 	bl	80006b4 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fa77 	bl	80006b4 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e06d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4921      	ldr	r1, [pc, #132]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a19      	ldr	r1, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	430b      	orrs	r3, r1
 800120e:	491b      	ldr	r1, [pc, #108]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fa4b 	bl	80006b4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fa47 	bl	80006b4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e03d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x46a>
 8001240:	e035      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fa34 	bl	80006b4 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fa30 	bl	80006b4 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e026      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x498>
 800126e:	e01e      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e019      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_RCC_OscConfig+0x500>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	429a      	cmp	r2, r3
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d0      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d910      	bls.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b67      	ldr	r3, [pc, #412]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4965      	ldr	r1, [pc, #404]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d040      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e073      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06b      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4936      	ldr	r1, [pc, #216]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff f982 	bl	80006b4 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff f97e 	bl	80006b4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e053      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d210      	bcs.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4922      	ldr	r1, [pc, #136]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f821 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	490a      	ldr	r1, [pc, #40]	@ (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_RCC_ClockConfig+0x1cc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1d0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f8e0 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000
 8001480:	40021000 	.word	0x40021000
 8001484:	0800231c 	.word	0x0800231c
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d002      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_GetSysClockFreq+0x36>
 80014be:	e027      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	e027      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d010      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0c5b      	lsrs	r3, r3, #17
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e004      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	613b      	str	r3, [r7, #16]
      break;
 800150e:	e002      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 8001512:	613b      	str	r3, [r7, #16]
      break;
 8001514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001516:	693b      	ldr	r3, [r7, #16]
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200
 800152c:	08002334 	.word	0x08002334
 8001530:	08002344 	.word	0x08002344
 8001534:	003d0900 	.word	0x003d0900

08001538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800153c:	4b02      	ldr	r3, [pc, #8]	@ (8001548 <HAL_RCC_GetHCLKFreq+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001550:	f7ff fff2 	bl	8001538 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	0800232c 	.word	0x0800232c

08001574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001578:	f7ff ffde 	bl	8001538 <HAL_RCC_GetHCLKFreq>
 800157c:	4602      	mov	r2, r0
 800157e:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	0adb      	lsrs	r3, r3, #11
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	4903      	ldr	r1, [pc, #12]	@ (8001598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	0800232c 	.word	0x0800232c

0800159c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <RCC_Delay+0x34>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <RCC_Delay+0x38>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0a5b      	lsrs	r3, r3, #9
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015b8:	bf00      	nop
  }
  while (Delay --);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	60fa      	str	r2, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f9      	bne.n	80015b8 <RCC_Delay+0x1c>
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000000 	.word	0x20000000
 80015d4:	10624dd3 	.word	0x10624dd3

080015d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e042      	b.n	8001670 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7fe ff4a 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	@ 0x24
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800161a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fdb7 	bl	8002190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2220      	movs	r2, #32
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2220      	movs	r2, #32
 8001664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b20      	cmp	r3, #32
 8001696:	d175      	bne.n	8001784 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_UART_Transmit+0x2c>
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e06e      	b.n	8001786 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2221      	movs	r2, #33	@ 0x21
 80016b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016b6:	f7fe fffd 	bl	80006b4 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	88fa      	ldrh	r2, [r7, #6]
 80016c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016d0:	d108      	bne.n	80016e4 <HAL_UART_Transmit+0x6c>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	e003      	b.n	80016ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80016ec:	e02e      	b.n	800174c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 fb1c 	bl	8001d36 <UART_WaitOnFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e03a      	b.n	8001786 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3302      	adds	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e007      	b.n	800173e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001750:	b29b      	uxth	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1cb      	bne.n	80016ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	2140      	movs	r1, #64	@ 0x40
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 fae8 	bl	8001d36 <UART_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e006      	b.n	8001786 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001784:	2302      	movs	r3, #2
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	4613      	mov	r3, r2
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d112      	bne.n	80017ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_UART_Receive_IT+0x26>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00b      	b.n	80017d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fb0f 	bl	8001de8 <UART_Start_Receive_IT>
 80017ca:	4603      	mov	r3, r0
 80017cc:	e000      	b.n	80017d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0ba      	sub	sp, #232	@ 0xe8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800180a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800181e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_UART_IRQHandler+0x66>
 800182a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fbec 	bl	8002014 <UART_Receive_IT>
      return;
 800183c:	e25b      	b.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800183e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80de 	beq.w	8001a04 <HAL_UART_IRQHandler+0x22c>
 8001848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001858:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80d1 	beq.w	8001a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_UART_IRQHandler+0xae>
 800186e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_UART_IRQHandler+0xd2>
 8001892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_UART_IRQHandler+0xf6>
 80018b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f043 0204 	orr.w	r2, r3, #4
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d011      	beq.n	80018fe <HAL_UART_IRQHandler+0x126>
 80018da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f043 0208 	orr.w	r2, r3, #8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 81f2 	beq.w	8001cec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_UART_IRQHandler+0x14e>
 8001914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fb77 	bl	8002014 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <HAL_UART_IRQHandler+0x17a>
 800194a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d04f      	beq.n	80019f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fa81 	bl	8001e5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	d041      	beq.n	80019ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3314      	adds	r3, #20
 800196c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001974:	e853 3f00 	ldrex	r3, [r3]
 8001978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800197c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3314      	adds	r3, #20
 800198e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800199a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800199e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80019a2:	e841 2300 	strex	r3, r2, [r1]
 80019a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80019aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1d9      	bne.n	8001966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d013      	beq.n	80019e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019be:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb8 <HAL_UART_IRQHandler+0x3e0>)
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe ffea 	bl	80009a0 <HAL_DMA_Abort_IT>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019dc:	4610      	mov	r0, r2
 80019de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019e0:	e00e      	b.n	8001a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fbb2 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019e8:	e00a      	b.n	8001a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fbae 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f0:	e006      	b.n	8001a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fbaa 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80019fe:	e175      	b.n	8001cec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a00:	bf00      	nop
    return;
 8001a02:	e173      	b.n	8001cec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	f040 814f 	bne.w	8001cac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8148 	beq.w	8001cac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8141 	beq.w	8001cac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80b6 	beq.w	8001bbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8145 	beq.w	8001cf0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f080 813e 	bcs.w	8001cf0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	f000 8088 	beq.w	8001b98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a96:	e853 3f00 	ldrex	r3, [r3]
 8001a9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	330c      	adds	r3, #12
 8001ab0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ab4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ab8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001abc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ac0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ac4:	e841 2300 	strex	r3, r2, [r1]
 8001ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1d9      	bne.n	8001a88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3314      	adds	r3, #20
 8001ada:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ade:	e853 3f00 	ldrex	r3, [r3]
 8001ae2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3314      	adds	r3, #20
 8001af4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001af8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001afe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001b04:	e841 2300 	strex	r3, r2, [r1]
 8001b08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e1      	bne.n	8001ad4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3314      	adds	r3, #20
 8001b16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b1a:	e853 3f00 	ldrex	r3, [r3]
 8001b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3314      	adds	r3, #20
 8001b30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001b3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b3c:	e841 2300 	strex	r3, r2, [r1]
 8001b40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e3      	bne.n	8001b10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	330c      	adds	r3, #12
 8001b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b60:	e853 3f00 	ldrex	r3, [r3]
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b68:	f023 0310 	bic.w	r3, r3, #16
 8001b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	330c      	adds	r3, #12
 8001b76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001b7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001b7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b82:	e841 2300 	strex	r3, r2, [r1]
 8001b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e3      	bne.n	8001b56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fec9 	bl	800092a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8b6 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001bb4:	e09c      	b.n	8001cf0 <HAL_UART_IRQHandler+0x518>
 8001bb6:	bf00      	nop
 8001bb8:	08001f1f 	.word	0x08001f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 808e 	beq.w	8001cf4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8089 	beq.w	8001cf4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	330c      	adds	r3, #12
 8001be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bec:	e853 3f00 	ldrex	r3, [r3]
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	330c      	adds	r3, #12
 8001c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001c06:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c0e:	e841 2300 	strex	r3, r2, [r1]
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e3      	bne.n	8001be2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3314      	adds	r3, #20
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	e853 3f00 	ldrex	r3, [r3]
 8001c28:	623b      	str	r3, [r7, #32]
   return(result);
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3314      	adds	r3, #20
 8001c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001c3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c46:	e841 2300 	strex	r3, r2, [r1]
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e3      	bne.n	8001c1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	330c      	adds	r3, #12
 8001c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	e853 3f00 	ldrex	r3, [r3]
 8001c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0310 	bic.w	r3, r3, #16
 8001c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	330c      	adds	r3, #12
 8001c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001c84:	61fa      	str	r2, [r7, #28]
 8001c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c88:	69b9      	ldr	r1, [r7, #24]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	e841 2300 	strex	r3, r2, [r1]
 8001c90:	617b      	str	r3, [r7, #20]
   return(result);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e3      	bne.n	8001c60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f83b 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001caa:	e023      	b.n	8001cf4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_UART_IRQHandler+0x4f4>
 8001cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f93e 	bl	8001f46 <UART_Transmit_IT>
    return;
 8001cca:	e014      	b.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
 8001cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f97d 	bl	8001fe4 <UART_EndTransmit_IT>
    return;
 8001cea:	e004      	b.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
    return;
 8001cec:	bf00      	nop
 8001cee:	e002      	b.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001cf4:	bf00      	nop
  }
}
 8001cf6:	37e8      	adds	r7, #232	@ 0xe8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d46:	e03b      	b.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4e:	d037      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d50:	f7fe fcb0 	bl	80006b4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	6a3a      	ldr	r2, [r7, #32]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d302      	bcc.n	8001d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e03a      	b.n	8001de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b80      	cmp	r3, #128	@ 0x80
 8001d7c:	d020      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b40      	cmp	r3, #64	@ 0x40
 8001d82:	d01d      	beq.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d116      	bne.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f856 	bl	8001e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2208      	movs	r2, #8
 8001db2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e00f      	b.n	8001de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d0b4      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2222      	movs	r2, #34	@ 0x22
 8001e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b095      	sub	sp, #84	@ 0x54
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6c:	e853 3f00 	ldrex	r3, [r3]
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e82:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e8a:	e841 2300 	strex	r3, r2, [r1]
 8001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e5      	bne.n	8001e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	e853 3f00 	ldrex	r3, [r3]
 8001ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3314      	adds	r3, #20
 8001eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ebe:	e841 2300 	strex	r3, r2, [r1]
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1e5      	bne.n	8001e96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d119      	bne.n	8001f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	e853 3f00 	ldrex	r3, [r3]
 8001ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f023 0310 	bic.w	r3, r3, #16
 8001ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	330c      	adds	r3, #12
 8001ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ef2:	61ba      	str	r2, [r7, #24]
 8001ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef6:	6979      	ldr	r1, [r7, #20]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	e841 2300 	strex	r3, r2, [r1]
 8001efe:	613b      	str	r3, [r7, #16]
   return(result);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e5      	bne.n	8001ed2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f14:	bf00      	nop
 8001f16:	3754      	adds	r7, #84	@ 0x54
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7fe f907 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b21      	cmp	r3, #33	@ 0x21
 8001f58:	d13e      	bne.n	8001fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f62:	d114      	bne.n	8001f8e <UART_Transmit_IT+0x48>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d110      	bne.n	8001f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	1c9a      	adds	r2, r3, #2
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e008      	b.n	8001fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	1c59      	adds	r1, r3, #1
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6211      	str	r1, [r2, #32]
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4619      	mov	r1, r3
 8001fae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fe79 	bl	8001cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	@ 0x30
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b22      	cmp	r3, #34	@ 0x22
 8002026:	f040 80ae 	bne.w	8002186 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002032:	d117      	bne.n	8002064 <UART_Receive_IT+0x50>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d113      	bne.n	8002064 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002052:	b29a      	uxth	r2, r3
 8002054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	1c9a      	adds	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
 8002062:	e026      	b.n	80020b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002076:	d007      	beq.n	8002088 <UART_Receive_IT+0x74>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <UART_Receive_IT+0x82>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e008      	b.n	80020a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4619      	mov	r1, r3
 80020c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15d      	bne.n	8002182 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0220 	bic.w	r2, r2, #32
 80020d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	2b01      	cmp	r3, #1
 800210a:	d135      	bne.n	8002178 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	330c      	adds	r3, #12
 8002118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	e853 3f00 	ldrex	r3, [r3]
 8002120:	613b      	str	r3, [r7, #16]
   return(result);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f023 0310 	bic.w	r3, r3, #16
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	330c      	adds	r3, #12
 8002130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002132:	623a      	str	r2, [r7, #32]
 8002134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	e841 2300 	strex	r3, r2, [r1]
 800213e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1e5      	bne.n	8002112 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	d10a      	bne.n	800216a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fdd5 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
 8002176:	e002      	b.n	800217e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fdc8 	bl	8001d0e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e002      	b.n	8002188 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3730      	adds	r7, #48	@ 0x30
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80021ca:	f023 030c 	bic.w	r3, r3, #12
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	@ (80022a4 <UART_SetConfig+0x114>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021f8:	f7ff f9bc 	bl	8001574 <HAL_RCC_GetPCLK2Freq>
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	e002      	b.n	8002206 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002200:	f7ff f9a4 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 8002204:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <UART_SetConfig+0x118>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	0119      	lsls	r1, r3, #4
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	@ 0x32
 8002250:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800225c:	4419      	add	r1, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fbb2 f2f3 	udiv	r2, r2, r3
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <UART_SetConfig+0x118>)
 8002276:	fba3 0302 	umull	r0, r3, r3, r2
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2064      	movs	r0, #100	@ 0x64
 800227e:	fb00 f303 	mul.w	r3, r0, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	3332      	adds	r3, #50	@ 0x32
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <UART_SetConfig+0x118>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	f003 020f 	and.w	r2, r3, #15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	440a      	add	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40013800 	.word	0x40013800
 80022a8:	51eb851f 	.word	0x51eb851f

080022ac <memset>:
 80022ac:	4603      	mov	r3, r0
 80022ae:	4402      	add	r2, r0
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d100      	bne.n	80022b6 <memset+0xa>
 80022b4:	4770      	bx	lr
 80022b6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ba:	e7f9      	b.n	80022b0 <memset+0x4>

080022bc <__libc_init_array>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	2600      	movs	r6, #0
 80022c0:	4d0c      	ldr	r5, [pc, #48]	@ (80022f4 <__libc_init_array+0x38>)
 80022c2:	4c0d      	ldr	r4, [pc, #52]	@ (80022f8 <__libc_init_array+0x3c>)
 80022c4:	1b64      	subs	r4, r4, r5
 80022c6:	10a4      	asrs	r4, r4, #2
 80022c8:	42a6      	cmp	r6, r4
 80022ca:	d109      	bne.n	80022e0 <__libc_init_array+0x24>
 80022cc:	f000 f81a 	bl	8002304 <_init>
 80022d0:	2600      	movs	r6, #0
 80022d2:	4d0a      	ldr	r5, [pc, #40]	@ (80022fc <__libc_init_array+0x40>)
 80022d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002300 <__libc_init_array+0x44>)
 80022d6:	1b64      	subs	r4, r4, r5
 80022d8:	10a4      	asrs	r4, r4, #2
 80022da:	42a6      	cmp	r6, r4
 80022dc:	d105      	bne.n	80022ea <__libc_init_array+0x2e>
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e4:	4798      	blx	r3
 80022e6:	3601      	adds	r6, #1
 80022e8:	e7ee      	b.n	80022c8 <__libc_init_array+0xc>
 80022ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ee:	4798      	blx	r3
 80022f0:	3601      	adds	r6, #1
 80022f2:	e7f2      	b.n	80022da <__libc_init_array+0x1e>
 80022f4:	08002348 	.word	0x08002348
 80022f8:	08002348 	.word	0x08002348
 80022fc:	08002348 	.word	0x08002348
 8002300:	0800234c 	.word	0x0800234c

08002304 <_init>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	bf00      	nop
 8002308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230a:	bc08      	pop	{r3}
 800230c:	469e      	mov	lr, r3
 800230e:	4770      	bx	lr

08002310 <_fini>:
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	bf00      	nop
 8002314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002316:	bc08      	pop	{r3}
 8002318:	469e      	mov	lr, r3
 800231a:	4770      	bx	lr
