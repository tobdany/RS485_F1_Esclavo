
RS485_F1_Esclavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002d38  08002d38  00003d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e5c  08002e5c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e64  08002e64  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e68  08002e68  00003e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000005c  08002ec8  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08002ec8  00004228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079a7  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186c  00000000  00000000  0000ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000543  00000000  00000000  0000d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b41  00000000  00000000  0000decb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d8d  00000000  00000000  00024a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fffd  00000000  00000000  0002d799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fbc  00000000  00000000  000ad7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000af798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d20 	.word	0x08002d20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002d20 	.word	0x08002d20

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <UART_SendString>:
uint32_t ConnTimeOut;
uint32_t Tick1000;
const uint8_t MY_SLAVE_ID = 1;


void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    _rs485_set_mode(RS485_MODE_TRANSMIT);
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f822 	bl	80001b0 <_rs485_set_mode>
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), 100);
 800016c:	6838      	ldr	r0, [r7, #0]
 800016e:	f7ff ffed 	bl	800014c <strlen>
 8000172:	4603      	mov	r3, r0
 8000174:	b29a      	uxth	r2, r3
 8000176:	2364      	movs	r3, #100	@ 0x64
 8000178:	6839      	ldr	r1, [r7, #0]
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f001 fb06 	bl	800178c <HAL_UART_Transmit>
    _rs485_set_mode(RS485_MODE_RECEIVE);
 8000180:	2001      	movs	r0, #1
 8000182:	f000 f815 	bl	80001b0 <_rs485_set_mode>
}
 8000186:	bf00      	nop
 8000188:	3708      	adds	r7, #8
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
	...

08000190 <HAL_UART_ErrorCallback>:
}

void HAL_UART_txCptlCallback(UART_HandleTypeDef *huart) {
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(huart, (uint8_t*)&rxValue_aux, sizeof(uint32_t));
 8000198:	2204      	movs	r2, #4
 800019a:	4904      	ldr	r1, [pc, #16]	@ (80001ac <HAL_UART_ErrorCallback+0x1c>)
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f001 fb80 	bl	80018a2 <HAL_UART_Receive_IT>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000078 	.word	0x20000078

080001b0 <_rs485_set_mode>:

/*RS485*/
void _rs485_set_mode(rs485_mode_e mode) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
    switch (mode) {
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d002      	beq.n	80001c6 <_rs485_set_mode+0x16>
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d007      	beq.n	80001d4 <_rs485_set_mode+0x24>
        break;
    case RS485_MODE_RECEIVE:
        HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
        break;
    }
}
 80001c4:	e00d      	b.n	80001e2 <_rs485_set_mode+0x32>
        HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001cc:	4807      	ldr	r0, [pc, #28]	@ (80001ec <_rs485_set_mode+0x3c>)
 80001ce:	f000 fe65 	bl	8000e9c <HAL_GPIO_WritePin>
        break;
 80001d2:	e006      	b.n	80001e2 <_rs485_set_mode+0x32>
        HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001da:	4804      	ldr	r0, [pc, #16]	@ (80001ec <_rs485_set_mode+0x3c>)
 80001dc:	f000 fe5e 	bl	8000e9c <HAL_GPIO_WritePin>
        break;
 80001e0:	bf00      	nop
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800

080001f0 <_rs485_write32>:

void _rs485_write32(uint32_t Value) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
    _rs485_set_mode(RS485_MODE_TRANSMIT);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f7ff ffd9 	bl	80001b0 <_rs485_set_mode>
    HAL_UART_Transmit(&huart1, (uint8_t*)&Value, sizeof(uint32_t), 20);
 80001fe:	1d39      	adds	r1, r7, #4
 8000200:	2314      	movs	r3, #20
 8000202:	2204      	movs	r2, #4
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <_rs485_write32+0x28>)
 8000206:	f001 fac1 	bl	800178c <HAL_UART_Transmit>
    _rs485_set_mode(RS485_MODE_RECEIVE);
 800020a:	2001      	movs	r0, #1
 800020c:	f7ff ffd0 	bl	80001b0 <_rs485_set_mode>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000090 	.word	0x20000090

0800021c <_rs485_init>:

void _rs485_init() {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    txvalue = 0; // Inicializaci√≥n del contador
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <_rs485_init+0x20>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
    _rs485_set_mode(RS485_MODE_RECEIVE);
 8000226:	2001      	movs	r0, #1
 8000228:	f7ff ffc2 	bl	80001b0 <_rs485_set_mode>
    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxValue_aux, sizeof(uint32_t));
 800022c:	2204      	movs	r2, #4
 800022e:	4904      	ldr	r1, [pc, #16]	@ (8000240 <_rs485_init+0x24>)
 8000230:	4804      	ldr	r0, [pc, #16]	@ (8000244 <_rs485_init+0x28>)
 8000232:	f001 fb36 	bl	80018a2 <HAL_UART_Receive_IT>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000080 	.word	0x20000080
 8000240:	20000078 	.word	0x20000078
 8000244:	20000090 	.word	0x20000090

08000248 <app_main>:

void app_main(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	@ 0x40
 800024c:	af00      	add	r7, sp, #0
    HAL_Delay(200);
 800024e:	20c8      	movs	r0, #200	@ 0xc8
 8000250:	f000 fac4 	bl	80007dc <HAL_Delay>
    _rs485_init();
 8000254:	f7ff ffe2 	bl	800021c <_rs485_init>
    UART_SendString(&huart1, "ESCLAVO: Iniciando (ID ");
 8000258:	4932      	ldr	r1, [pc, #200]	@ (8000324 <app_main+0xdc>)
 800025a:	4833      	ldr	r0, [pc, #204]	@ (8000328 <app_main+0xe0>)
 800025c:	f7ff ff7e 	bl	800015c <UART_SendString>
    char my_id_str[10];
    sprintf(my_id_str, "%u)...\r\n", MY_SLAVE_ID);
 8000260:	2301      	movs	r3, #1
 8000262:	461a      	mov	r2, r3
 8000264:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000268:	4930      	ldr	r1, [pc, #192]	@ (800032c <app_main+0xe4>)
 800026a:	4618      	mov	r0, r3
 800026c:	f002 f8a8 	bl	80023c0 <siprintf>
    UART_SendString(&huart1, my_id_str);
 8000270:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000274:	4619      	mov	r1, r3
 8000276:	482c      	ldr	r0, [pc, #176]	@ (8000328 <app_main+0xe0>)
 8000278:	f7ff ff70 	bl	800015c <UART_SendString>


    Tick1000 = HAL_GetTick();
 800027c:	f000 faa4 	bl	80007c8 <HAL_GetTick>
 8000280:	4603      	mov	r3, r0
 8000282:	4a2b      	ldr	r2, [pc, #172]	@ (8000330 <app_main+0xe8>)
 8000284:	6013      	str	r3, [r2, #0]
    while (1) {
        // Solo responde cuando se le solicita.

        // ESCLAVO: Procesar solicitud del Maestro
        if (flagRx == 1) {
 8000286:	4b2b      	ldr	r3, [pc, #172]	@ (8000334 <app_main+0xec>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d133      	bne.n	80002f6 <app_main+0xae>
            flagRx = 0;
 800028e:	4b29      	ldr	r3, [pc, #164]	@ (8000334 <app_main+0xec>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
            // HAL_Delay(50);
            HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET); // Apaga LED de RX
 8000294:	2200      	movs	r2, #0
 8000296:	2101      	movs	r1, #1
 8000298:	4827      	ldr	r0, [pc, #156]	@ (8000338 <app_main+0xf0>)
 800029a:	f000 fdff 	bl	8000e9c <HAL_GPIO_WritePin>

            char rx_str[50];
            sprintf(rx_str, "ESCLAVO: Solicitud recibida: %lu\r\n", rxValue);
 800029e:	4b27      	ldr	r3, [pc, #156]	@ (800033c <app_main+0xf4>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	463b      	mov	r3, r7
 80002a4:	4926      	ldr	r1, [pc, #152]	@ (8000340 <app_main+0xf8>)
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f88a 	bl	80023c0 <siprintf>
            UART_SendString(&huart1, rx_str);
 80002ac:	463b      	mov	r3, r7
 80002ae:	4619      	mov	r1, r3
 80002b0:	481d      	ldr	r0, [pc, #116]	@ (8000328 <app_main+0xe0>)
 80002b2:	f7ff ff53 	bl	800015c <UART_SendString>

            if (Rs485_Conn == 0) {
 80002b6:	4b23      	ldr	r3, [pc, #140]	@ (8000344 <app_main+0xfc>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d102      	bne.n	80002c4 <app_main+0x7c>
                Rs485_Conn = 1;
 80002be:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <app_main+0xfc>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
            }

            if (rxValue == MY_SLAVE_ID) {
 80002c4:	2301      	movs	r3, #1
 80002c6:	461a      	mov	r2, r3
 80002c8:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <app_main+0xf4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d10e      	bne.n	80002ee <app_main+0xa6>
                txvalue++;
 80002d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <app_main+0x100>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000348 <app_main+0x100>)
 80002d8:	6013      	str	r3, [r2, #0]
                _rs485_write32(txvalue);
 80002da:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <app_main+0x100>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff86 	bl	80001f0 <_rs485_write32>
                UART_SendString(&huart1, "ESCLAVO: Respondiendo con mi contador.\r\n");
 80002e4:	4919      	ldr	r1, [pc, #100]	@ (800034c <app_main+0x104>)
 80002e6:	4810      	ldr	r0, [pc, #64]	@ (8000328 <app_main+0xe0>)
 80002e8:	f7ff ff38 	bl	800015c <UART_SendString>
 80002ec:	e003      	b.n	80002f6 <app_main+0xae>
            } else {
                 UART_SendString(&huart1, "ESCLAVO: Solicitud no para mi.\r\n");
 80002ee:	4918      	ldr	r1, [pc, #96]	@ (8000350 <app_main+0x108>)
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <app_main+0xe0>)
 80002f2:	f7ff ff33 	bl	800015c <UART_SendString>
            }
        }

        // Detectar si la comunicaci√≥n cay√≥ (timeout de recepci√≥n)
        if (Rs485_Conn == 1 && (HAL_GetTick() - ConnTimeOut) > 1500) {
 80002f6:	4b13      	ldr	r3, [pc, #76]	@ (8000344 <app_main+0xfc>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d1c3      	bne.n	8000286 <app_main+0x3e>
 80002fe:	f000 fa63 	bl	80007c8 <HAL_GetTick>
 8000302:	4602      	mov	r2, r0
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <app_main+0x10c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800030e:	4293      	cmp	r3, r2
 8000310:	d9b9      	bls.n	8000286 <app_main+0x3e>
            Rs485_Conn = 0;
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <app_main+0xfc>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
            UART_SendString(&huart1, "ESCLAVO: Comunicacion con Maestro caida.\r\n");
 8000318:	490f      	ldr	r1, [pc, #60]	@ (8000358 <app_main+0x110>)
 800031a:	4803      	ldr	r0, [pc, #12]	@ (8000328 <app_main+0xe0>)
 800031c:	f7ff ff1e 	bl	800015c <UART_SendString>
        if (flagRx == 1) {
 8000320:	e7b1      	b.n	8000286 <app_main+0x3e>
 8000322:	bf00      	nop
 8000324:	08002d38 	.word	0x08002d38
 8000328:	20000090 	.word	0x20000090
 800032c:	08002d50 	.word	0x08002d50
 8000330:	2000008c 	.word	0x2000008c
 8000334:	20000084 	.word	0x20000084
 8000338:	40010800 	.word	0x40010800
 800033c:	2000007c 	.word	0x2000007c
 8000340:	08002d5c 	.word	0x08002d5c
 8000344:	20000085 	.word	0x20000085
 8000348:	20000080 	.word	0x20000080
 800034c:	08002d80 	.word	0x08002d80
 8000350:	08002dac 	.word	0x08002dac
 8000354:	20000088 	.word	0x20000088
 8000358:	08002dd0 	.word	0x08002dd0

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f000 f9da 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f808 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f000 f870 	bl	800044c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800036c:	f000 f844 	bl	80003f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000370:	f7ff ff6a 	bl	8000248 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <main+0x18>

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	@ 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	@ 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 f83c 	bl	8002404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	2310      	movs	r3, #16
 80003a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003aa:	2300      	movs	r3, #0
 80003ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003ae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80003b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd87 	bl	8000ecc <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003c4:	f000 f884 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fff5 	bl	80013d0 <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003ec:	f000 f870 	bl	80004d0 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3740      	adds	r7, #64	@ 0x40
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	@ (8000448 <MX_USART1_UART_Init+0x50>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 8000404:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_USART1_UART_Init+0x4c>)
 8000430:	f001 f95c 	bl	80016ec <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800043a:	f000 f849 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000090 	.word	0x20000090
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <MX_GPIO_Init+0x7c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <MX_GPIO_Init+0x7c>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <MX_GPIO_Init+0x7c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RX_Pin|RS485_DE_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f240 1101 	movw	r1, #257	@ 0x101
 800047e:	4813      	ldr	r0, [pc, #76]	@ (80004cc <MX_GPIO_Init+0x80>)
 8000480:	f000 fd0c 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	4619      	mov	r1, r3
 800049a:	480c      	ldr	r0, [pc, #48]	@ (80004cc <MX_GPIO_Init+0x80>)
 800049c:	f000 fb82 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_DE_Pin;
 80004a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	2301      	movs	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ae:	2303      	movs	r3, #3
 80004b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_GPIO_Init+0x80>)
 80004ba:	f000 fb73 	bl	8000ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <Error_Handler+0x8>

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a20      	ldr	r2, [pc, #128]	@ (80005dc <HAL_UART_MspInit+0x9c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d139      	bne.n	80005d4 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a1e      	ldr	r2, [pc, #120]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a18      	ldr	r2, [pc, #96]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <HAL_UART_MspInit+0xa4>)
 80005a6:	f000 fafd 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <HAL_UART_MspInit+0xa4>)
 80005c0:	f000 faf0 	bl	8000ba4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2025      	movs	r0, #37	@ 0x25
 80005ca:	f000 fa02 	bl	80009d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ce:	2025      	movs	r0, #37	@ 0x25
 80005d0:	f000 fa1b 	bl	8000a0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <NMI_Handler+0x4>

080005f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <HardFault_Handler+0x4>

080005f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <MemManage_Handler+0x4>

08000600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <UsageFault_Handler+0x4>

08000610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000638:	f000 f8b4 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <USART1_IRQHandler+0x10>)
 8000646:	f001 f951 	bl	80018ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000090 	.word	0x20000090

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f001 fec6 	bl	8002414 <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20002800 	.word	0x20002800
 80006b4:	00000400 	.word	0x00000400
 80006b8:	200000d8 	.word	0x200000d8
 80006bc:	20000228 	.word	0x20000228

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006cc:	f7ff fff8 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d2:	490c      	ldr	r1, [pc, #48]	@ (8000704 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a09      	ldr	r2, [pc, #36]	@ (800070c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006e8:	4c09      	ldr	r4, [pc, #36]	@ (8000710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f6:	f001 fe93 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fe2f 	bl	800035c <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000708:	08002e6c 	.word	0x08002e6c
  ldr r2, =_sbss
 800070c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000710:	20000228 	.word	0x20000228

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f947 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	200f      	movs	r0, #15
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff fed2 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f95f 	bl	8000a26 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f927 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	@ (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	@ (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	200000dc 	.word	0x200000dc

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff fff0 	bl	80007c8 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffe0 	bl	80007c8 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	@ (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	@ (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	@ 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	@ 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f7ff ff90 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff2d 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff42 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff90 	bl	8000914 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5f 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff35 	bl	8000888 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa2 	bl	8000978 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b085      	sub	sp, #20
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d008      	beq.n	8000a68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2204      	movs	r2, #4
 8000a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e020      	b.n	8000aaa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 020e 	bic.w	r2, r2, #14
 8000a76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0201 	bic.w	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d005      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2204      	movs	r2, #4
 8000ad0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e051      	b.n	8000b7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 020e 	bic.w	r2, r2, #14
 8000ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <HAL_DMA_Abort_IT+0xd4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d029      	beq.n	8000b56 <HAL_DMA_Abort_IT+0xa2>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <HAL_DMA_Abort_IT+0xd8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d022      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x9e>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <HAL_DMA_Abort_IT+0xdc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01a      	beq.n	8000b4c <HAL_DMA_Abort_IT+0x98>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <HAL_DMA_Abort_IT+0xe0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d012      	beq.n	8000b46 <HAL_DMA_Abort_IT+0x92>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <HAL_DMA_Abort_IT+0xe4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00a      	beq.n	8000b40 <HAL_DMA_Abort_IT+0x8c>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <HAL_DMA_Abort_IT+0xe8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d102      	bne.n	8000b3a <HAL_DMA_Abort_IT+0x86>
 8000b34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b38:	e00e      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b3e:	e00b      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b44:	e008      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	e005      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b50:	e002      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b52:	2310      	movs	r3, #16
 8000b54:	e000      	b.n	8000b58 <HAL_DMA_Abort_IT+0xa4>
 8000b56:	2301      	movs	r3, #1
 8000b58:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <HAL_DMA_Abort_IT+0xec>)
 8000b5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
    } 
  }
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020008 	.word	0x40020008
 8000b8c:	4002001c 	.word	0x4002001c
 8000b90:	40020030 	.word	0x40020030
 8000b94:	40020044 	.word	0x40020044
 8000b98:	40020058 	.word	0x40020058
 8000b9c:	4002006c 	.word	0x4002006c
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	@ 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e161      	b.n	8000e7c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8150 	bne.w	8000e76 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a97      	ldr	r2, [pc, #604]	@ (8000e38 <HAL_GPIO_Init+0x294>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d05e      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000be0:	4a95      	ldr	r2, [pc, #596]	@ (8000e38 <HAL_GPIO_Init+0x294>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d875      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000be6:	4a95      	ldr	r2, [pc, #596]	@ (8000e3c <HAL_GPIO_Init+0x298>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d058      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bec:	4a93      	ldr	r2, [pc, #588]	@ (8000e3c <HAL_GPIO_Init+0x298>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d86f      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a93      	ldr	r2, [pc, #588]	@ (8000e40 <HAL_GPIO_Init+0x29c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d052      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bf8:	4a91      	ldr	r2, [pc, #580]	@ (8000e40 <HAL_GPIO_Init+0x29c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d869      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a91      	ldr	r2, [pc, #580]	@ (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d04c      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c04:	4a8f      	ldr	r2, [pc, #572]	@ (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d863      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a8f      	ldr	r2, [pc, #572]	@ (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d046      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c10:	4a8d      	ldr	r2, [pc, #564]	@ (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d85d      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d82a      	bhi.n	8000c70 <HAL_GPIO_Init+0xcc>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d859      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <HAL_GPIO_Init+0x80>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c79 	.word	0x08000c79
 8000c2c:	08000c8b 	.word	0x08000c8b
 8000c30:	08000ccd 	.word	0x08000ccd
 8000c34:	08000cd3 	.word	0x08000cd3
 8000c38:	08000cd3 	.word	0x08000cd3
 8000c3c:	08000cd3 	.word	0x08000cd3
 8000c40:	08000cd3 	.word	0x08000cd3
 8000c44:	08000cd3 	.word	0x08000cd3
 8000c48:	08000cd3 	.word	0x08000cd3
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000cd3 	.word	0x08000cd3
 8000c64:	08000cd3 	.word	0x08000cd3
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	4a76      	ldr	r2, [pc, #472]	@ (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c76:	e02c      	b.n	8000cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e029      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	3304      	adds	r3, #4
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e024      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e01f      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	330c      	adds	r3, #12
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e01a      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e013      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d105      	bne.n	8000cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	611a      	str	r2, [r3, #16]
          break;
 8000cbe:	e009      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	615a      	str	r2, [r3, #20]
          break;
 8000cca:	e003      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          break;
 8000cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2bff      	cmp	r3, #255	@ 0xff
 8000cd8:	d801      	bhi.n	8000cde <HAL_GPIO_Init+0x13a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	e001      	b.n	8000ce2 <HAL_GPIO_Init+0x13e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	@ 0xff
 8000ce8:	d802      	bhi.n	8000cf0 <HAL_GPIO_Init+0x14c>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x152>
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	6a39      	ldr	r1, [r7, #32]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80a9 	beq.w	8000e76 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d24:	4b4a      	ldr	r3, [pc, #296]	@ (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a49      	ldr	r2, [pc, #292]	@ (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b47      	ldr	r3, [pc, #284]	@ (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d3c:	4a45      	ldr	r2, [pc, #276]	@ (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3d      	ldr	r2, [pc, #244]	@ (8000e58 <HAL_GPIO_Init+0x2b4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1e0>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1dc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3b      	ldr	r2, [pc, #236]	@ (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1d8>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1e2>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1e2>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1e2>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d96:	492f      	ldr	r1, [pc, #188]	@ (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	492b      	ldr	r1, [pc, #172]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4927      	ldr	r1, [pc, #156]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	4921      	ldr	r1, [pc, #132]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60cb      	str	r3, [r1, #12]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	491d      	ldr	r1, [pc, #116]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4917      	ldr	r1, [pc, #92]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4913      	ldr	r1, [pc, #76]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01f      	beq.n	8000e68 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e01f      	b.n	8000e76 <HAL_GPIO_Init+0x2d2>
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4909      	ldr	r1, [pc, #36]	@ (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	3301      	adds	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	fa22 f303 	lsr.w	r3, r2, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f47f ae96 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	372c      	adds	r7, #44	@ 0x2c
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb8:	e003      	b.n	8000ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	611a      	str	r2, [r3, #16]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e272      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8087 	beq.w	8000ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eec:	4b92      	ldr	r3, [pc, #584]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d00c      	beq.n	8000f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d112      	bne.n	8000f2a <HAL_RCC_OscConfig+0x5e>
 8000f04:	4b8c      	ldr	r3, [pc, #560]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f10:	d10b      	bne.n	8000f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f12:	4b89      	ldr	r3, [pc, #548]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d06c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x12c>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d168      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e24c      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x76>
 8000f34:	4b80      	ldr	r3, [pc, #512]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a7f      	ldr	r2, [pc, #508]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e02e      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x98>
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7a      	ldr	r2, [pc, #488]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b78      	ldr	r3, [pc, #480]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a77      	ldr	r2, [pc, #476]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0xbc>
 8000f6e:	4b72      	ldr	r3, [pc, #456]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a71      	ldr	r2, [pc, #452]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f88:	4b6b      	ldr	r3, [pc, #428]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b68      	ldr	r3, [pc, #416]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a67      	ldr	r2, [pc, #412]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc0e 	bl	80007c8 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fc0a 	bl	80007c8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	@ 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e200      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fbfa 	bl	80007c8 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fbf6 	bl	80007c8 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	@ 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1ec      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	4b53      	ldr	r3, [pc, #332]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x10c>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d063      	beq.n	80010ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001006:	4b4c      	ldr	r3, [pc, #304]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001012:	4b49      	ldr	r3, [pc, #292]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b08      	cmp	r3, #8
 800101c:	d11c      	bne.n	8001058 <HAL_RCC_OscConfig+0x18c>
 800101e:	4b46      	ldr	r3, [pc, #280]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x176>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1c0      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4939      	ldr	r1, [pc, #228]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e03a      	b.n	80010ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <HAL_RCC_OscConfig+0x270>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fbaf 	bl	80007c8 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fbab 	bl	80007c8 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1a1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4927      	ldr	r1, [pc, #156]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <HAL_RCC_OscConfig+0x270>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fb8e 	bl	80007c8 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fb8a 	bl	80007c8 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e180      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d03a      	beq.n	8001150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_RCC_OscConfig+0x274>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fb6e 	bl	80007c8 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fb6a 	bl	80007c8 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e160      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 face 	bl	80016b0 <RCC_Delay>
 8001114:	e01c      	b.n	8001150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_RCC_OscConfig+0x274>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111c:	f7ff fb54 	bl	80007c8 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001122:	e00f      	b.n	8001144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fb50 	bl	80007c8 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d908      	bls.n	8001144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e146      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	42420000 	.word	0x42420000
 8001140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e9      	bne.n	8001124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80a6 	beq.w	80012aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001162:	4b8b      	ldr	r3, [pc, #556]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10d      	bne.n	800118a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a87      	ldr	r2, [pc, #540]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b85      	ldr	r3, [pc, #532]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118a:	4b82      	ldr	r3, [pc, #520]	@ (8001394 <HAL_RCC_OscConfig+0x4c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001196:	4b7f      	ldr	r3, [pc, #508]	@ (8001394 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7e      	ldr	r2, [pc, #504]	@ (8001394 <HAL_RCC_OscConfig+0x4c8>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fb11 	bl	80007c8 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fb0d 	bl	80007c8 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b64      	cmp	r3, #100	@ 0x64
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e103      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4b75      	ldr	r3, [pc, #468]	@ (8001394 <HAL_RCC_OscConfig+0x4c8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x312>
 80011d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e02d      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x334>
 80011e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a69      	ldr	r2, [pc, #420]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a66      	ldr	r2, [pc, #408]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	e01c      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b05      	cmp	r3, #5
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x356>
 8001208:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a60      	ldr	r2, [pc, #384]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a5d      	ldr	r2, [pc, #372]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 8001222:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a5a      	ldr	r2, [pc, #360]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a57      	ldr	r2, [pc, #348]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d015      	beq.n	800126e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fac1 	bl	80007c8 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fabd 	bl	80007c8 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0b1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	4b4b      	ldr	r3, [pc, #300]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ee      	beq.n	800124a <HAL_RCC_OscConfig+0x37e>
 800126c:	e014      	b.n	8001298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff faab 	bl	80007c8 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff faa7 	bl	80007c8 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e09b      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d105      	bne.n	80012aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8087 	beq.w	80013c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d061      	beq.n	8001384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d146      	bne.n	8001356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c8:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <HAL_RCC_OscConfig+0x4cc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fa7b 	bl	80007c8 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d6:	f7ff fa77 	bl	80007c8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e06d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012fc:	d108      	bne.n	8001310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4921      	ldr	r1, [pc, #132]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a19      	ldr	r1, [r3, #32]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	430b      	orrs	r3, r1
 8001322:	491b      	ldr	r1, [pc, #108]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_RCC_OscConfig+0x4cc>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fa4b 	bl	80007c8 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fa47 	bl	80007c8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x46a>
 8001354:	e035      	b.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_RCC_OscConfig+0x4cc>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fa34 	bl	80007c8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fa30 	bl	80007c8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e026      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x498>
 8001382:	e01e      	b.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d107      	bne.n	800139c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e019      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
 8001390:	40021000 	.word	0x40021000
 8001394:	40007000 	.word	0x40007000
 8001398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_RCC_OscConfig+0x500>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0d0      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d910      	bls.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b67      	ldr	r3, [pc, #412]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 0207 	bic.w	r2, r3, #7
 80013fa:	4965      	ldr	r1, [pc, #404]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b8      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142c:	4b59      	ldr	r3, [pc, #356]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a58      	ldr	r2, [pc, #352]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	4b53      	ldr	r3, [pc, #332]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800144e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b50      	ldr	r3, [pc, #320]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	494d      	ldr	r1, [pc, #308]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d040      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d115      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e073      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06b      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4936      	ldr	r1, [pc, #216]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff f982 	bl	80007c8 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff f97e 	bl	80007c8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e053      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d210      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4922      	ldr	r1, [pc, #136]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e032      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4916      	ldr	r1, [pc, #88]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	490e      	ldr	r1, [pc, #56]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155e:	f000 f821 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	490a      	ldr	r1, [pc, #40]	@ (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1cc>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_RCC_ClockConfig+0x1d0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8e0 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000
 8001594:	40021000 	.word	0x40021000
 8001598:	08002dfc 	.word	0x08002dfc
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x94>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x30>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x36>
 80015d2:	e027      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_RCC_GetSysClockFreq+0x98>)
 80015d6:	613b      	str	r3, [r7, #16]
      break;
 80015d8:	e027      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d010      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0c5b      	lsrs	r3, r3, #17
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	4a11      	ldr	r2, [pc, #68]	@ (8001644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <HAL_RCC_GetSysClockFreq+0x98>)
 8001606:	fb03 f202 	mul.w	r2, r3, r2
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e004      	b.n	800161e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a0c      	ldr	r2, [pc, #48]	@ (8001648 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	613b      	str	r3, [r7, #16]
      break;
 8001622:	e002      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_RCC_GetSysClockFreq+0x98>)
 8001626:	613b      	str	r3, [r7, #16]
      break;
 8001628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800162a:	693b      	ldr	r3, [r7, #16]
}
 800162c:	4618      	mov	r0, r3
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	007a1200 	.word	0x007a1200
 8001640:	08002e14 	.word	0x08002e14
 8001644:	08002e24 	.word	0x08002e24
 8001648:	003d0900 	.word	0x003d0900

0800164c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <HAL_RCC_GetHCLKFreq+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001664:	f7ff fff2 	bl	800164c <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	@ (8001684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	08002e0c 	.word	0x08002e0c

08001688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800168c:	f7ff ffde 	bl	800164c <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	0adb      	lsrs	r3, r3, #11
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4903      	ldr	r1, [pc, #12]	@ (80016ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08002e0c 	.word	0x08002e0c

080016b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <RCC_Delay+0x34>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <RCC_Delay+0x38>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0a5b      	lsrs	r3, r3, #9
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016cc:	bf00      	nop
  }
  while (Delay --);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	60fa      	str	r2, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f9      	bne.n	80016cc <RCC_Delay+0x1c>
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000000 	.word	0x20000000
 80016e8:	10624dd3 	.word	0x10624dd3

080016ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e042      	b.n	8001784 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe ff14 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800172e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fdb7 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d175      	bne.n	8001898 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_UART_Transmit+0x2c>
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e06e      	b.n	800189a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2221      	movs	r2, #33	@ 0x21
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017ca:	f7fe fffd 	bl	80007c8 <HAL_GetTick>
 80017ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e4:	d108      	bne.n	80017f8 <HAL_UART_Transmit+0x6c>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d104      	bne.n	80017f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	e003      	b.n	8001800 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001800:	e02e      	b.n	8001860 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2200      	movs	r2, #0
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fb1c 	bl	8001e4a <UART_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e03a      	b.n	800189a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	3302      	adds	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	e007      	b.n	8001852 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	3301      	adds	r3, #1
 8001850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1cb      	bne.n	8001802 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	2140      	movs	r1, #64	@ 0x40
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fae8 	bl	8001e4a <UART_WaitOnFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e006      	b.n	800189a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	4613      	mov	r3, r2
 80018ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d112      	bne.n	80018e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_UART_Receive_IT+0x26>
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00b      	b.n	80018e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	461a      	mov	r2, r3
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fb0f 	bl	8001efc <UART_Start_Receive_IT>
 80018de:	4603      	mov	r3, r0
 80018e0:	e000      	b.n	80018e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0ba      	sub	sp, #232	@ 0xe8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800191e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800192a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_UART_IRQHandler+0x66>
 800193e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001942:	f003 0320 	and.w	r3, r3, #32
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbec 	bl	8002128 <UART_Receive_IT>
      return;
 8001950:	e25b      	b.n	8001e0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80de 	beq.w	8001b18 <HAL_UART_IRQHandler+0x22c>
 800195c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800196c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80d1 	beq.w	8001b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_UART_IRQHandler+0xae>
 8001982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800199a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_UART_IRQHandler+0xd2>
 80019a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_UART_IRQHandler+0xf6>
 80019ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80019e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d011      	beq.n	8001a12 <HAL_UART_IRQHandler+0x126>
 80019ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80019fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f043 0208 	orr.w	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 81f2 	beq.w	8001e00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_UART_IRQHandler+0x14e>
 8001a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fb77 	bl	8002128 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_UART_IRQHandler+0x17a>
 8001a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d04f      	beq.n	8001b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fa81 	bl	8001f6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d041      	beq.n	8001afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a88:	e853 3f00 	ldrex	r3, [r3]
 8001a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3314      	adds	r3, #20
 8001aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001ab6:	e841 2300 	strex	r3, r2, [r1]
 8001aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1d9      	bne.n	8001a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d013      	beq.n	8001af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ccc <HAL_UART_IRQHandler+0x3e0>)
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe ffea 	bl	8000ab4 <HAL_DMA_Abort_IT>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001af0:	4610      	mov	r0, r2
 8001af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001af4:	e00e      	b.n	8001b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fb4a 	bl	8000190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001afc:	e00a      	b.n	8001b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fb46 	bl	8000190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b04:	e006      	b.n	8001b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fb42 	bl	8000190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001b12:	e175      	b.n	8001e00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b14:	bf00      	nop
    return;
 8001b16:	e173      	b.n	8001e00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	f040 814f 	bne.w	8001dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8148 	beq.w	8001dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8141 	beq.w	8001dc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80b6 	beq.w	8001cd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8145 	beq.w	8001e04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f080 813e 	bcs.w	8001e04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f000 8088 	beq.w	8001cac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	330c      	adds	r3, #12
 8001ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001baa:	e853 3f00 	ldrex	r3, [r3]
 8001bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330c      	adds	r3, #12
 8001bc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001bc8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001bd8:	e841 2300 	strex	r3, r2, [r1]
 8001bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1d9      	bne.n	8001b9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3314      	adds	r3, #20
 8001bee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bf2:	e853 3f00 	ldrex	r3, [r3]
 8001bf6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001bf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3314      	adds	r3, #20
 8001c08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001c18:	e841 2300 	strex	r3, r2, [r1]
 8001c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e1      	bne.n	8001be8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3314      	adds	r3, #20
 8001c2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c2e:	e853 3f00 	ldrex	r3, [r3]
 8001c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001c48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001c4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c50:	e841 2300 	strex	r3, r2, [r1]
 8001c54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e3      	bne.n	8001c24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c74:	e853 3f00 	ldrex	r3, [r3]
 8001c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c7c:	f023 0310 	bic.w	r3, r3, #16
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001c8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c96:	e841 2300 	strex	r3, r2, [r1]
 8001c9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e3      	bne.n	8001c6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fec9 	bl	8000a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8b6 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001cc8:	e09c      	b.n	8001e04 <HAL_UART_IRQHandler+0x518>
 8001cca:	bf00      	nop
 8001ccc:	08002033 	.word	0x08002033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 808e 	beq.w	8001e08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8089 	beq.w	8001e08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d00:	e853 3f00 	ldrex	r3, [r3]
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	330c      	adds	r3, #12
 8001d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001d1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d22:	e841 2300 	strex	r3, r2, [r1]
 8001d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e3      	bne.n	8001cf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3314      	adds	r3, #20
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	e853 3f00 	ldrex	r3, [r3]
 8001d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3314      	adds	r3, #20
 8001d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d5a:	e841 2300 	strex	r3, r2, [r1]
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1e3      	bne.n	8001d2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	e853 3f00 	ldrex	r3, [r3]
 8001d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0310 	bic.w	r3, r3, #16
 8001d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	330c      	adds	r3, #12
 8001d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001d98:	61fa      	str	r2, [r7, #28]
 8001d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	69b9      	ldr	r1, [r7, #24]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	617b      	str	r3, [r7, #20]
   return(result);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e3      	bne.n	8001d74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f83b 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001dbe:	e023      	b.n	8001e08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_UART_IRQHandler+0x4f4>
 8001dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f93e 	bl	800205a <UART_Transmit_IT>
    return;
 8001dde:	e014      	b.n	8001e0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <HAL_UART_IRQHandler+0x51e>
 8001dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f97d 	bl	80020f8 <UART_EndTransmit_IT>
    return;
 8001dfe:	e004      	b.n	8001e0a <HAL_UART_IRQHandler+0x51e>
    return;
 8001e00:	bf00      	nop
 8001e02:	e002      	b.n	8001e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8001e04:	bf00      	nop
 8001e06:	e000      	b.n	8001e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8001e08:	bf00      	nop
  }
}
 8001e0a:	37e8      	adds	r7, #232	@ 0xe8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5a:	e03b      	b.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e62:	d037      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e64:	f7fe fcb0 	bl	80007c8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d302      	bcc.n	8001e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e03a      	b.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b80      	cmp	r3, #128	@ 0x80
 8001e90:	d020      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b40      	cmp	r3, #64	@ 0x40
 8001e96:	d01d      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d116      	bne.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f856 	bl	8001f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e00f      	b.n	8001ef4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d0b4      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2222      	movs	r2, #34	@ 0x22
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b095      	sub	sp, #84	@ 0x54
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f80:	e853 3f00 	ldrex	r3, [r3]
 8001f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	330c      	adds	r3, #12
 8001f94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f96:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f9e:	e841 2300 	strex	r3, r2, [r1]
 8001fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e5      	bne.n	8001f76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	e853 3f00 	ldrex	r3, [r3]
 8001fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3314      	adds	r3, #20
 8001fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd2:	e841 2300 	strex	r3, r2, [r1]
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1e5      	bne.n	8001faa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d119      	bne.n	800201a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f023 0310 	bic.w	r3, r3, #16
 8001ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002006:	61ba      	str	r2, [r7, #24]
 8002008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200a:	6979      	ldr	r1, [r7, #20]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	e841 2300 	strex	r3, r2, [r1]
 8002012:	613b      	str	r3, [r7, #16]
   return(result);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002028:	bf00      	nop
 800202a:	3754      	adds	r7, #84	@ 0x54
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7fe f89f 	bl	8000190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b21      	cmp	r3, #33	@ 0x21
 800206c:	d13e      	bne.n	80020ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002076:	d114      	bne.n	80020a2 <UART_Transmit_IT+0x48>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d110      	bne.n	80020a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	1c9a      	adds	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	621a      	str	r2, [r3, #32]
 80020a0:	e008      	b.n	80020b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6211      	str	r1, [r2, #32]
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10f      	bne.n	80020e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fe79 	bl	8001e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b22      	cmp	r3, #34	@ 0x22
 800213a:	f040 80ae 	bne.w	800229a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002146:	d117      	bne.n	8002178 <UART_Receive_IT+0x50>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	b29b      	uxth	r3, r3
 8002162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002166:	b29a      	uxth	r2, r3
 8002168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	1c9a      	adds	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
 8002176:	e026      	b.n	80021c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800218a:	d007      	beq.n	800219c <UART_Receive_IT+0x74>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <UART_Receive_IT+0x82>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e008      	b.n	80021bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4619      	mov	r1, r3
 80021d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15d      	bne.n	8002296 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0220 	bic.w	r2, r2, #32
 80021e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	2b01      	cmp	r3, #1
 800221e:	d135      	bne.n	800228c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	e853 3f00 	ldrex	r3, [r3]
 8002234:	613b      	str	r3, [r7, #16]
   return(result);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f023 0310 	bic.w	r3, r3, #16
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	330c      	adds	r3, #12
 8002244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002246:	623a      	str	r2, [r7, #32]
 8002248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	69f9      	ldr	r1, [r7, #28]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	e841 2300 	strex	r3, r2, [r1]
 8002252:	61bb      	str	r3, [r7, #24]
   return(result);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e5      	bne.n	8002226 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d10a      	bne.n	800227e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fdd5 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
 800228a:	e002      	b.n	8002292 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fdc8 	bl	8001e22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e002      	b.n	800229c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	3730      	adds	r7, #48	@ 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80022de:	f023 030c 	bic.w	r3, r3, #12
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <UART_SetConfig+0x114>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800230c:	f7ff f9bc 	bl	8001688 <HAL_RCC_GetPCLK2Freq>
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	e002      	b.n	800231a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002314:	f7ff f9a4 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	4a22      	ldr	r2, [pc, #136]	@ (80023bc <UART_SetConfig+0x118>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	0119      	lsls	r1, r3, #4
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <UART_SetConfig+0x118>)
 8002352:	fba3 0302 	umull	r0, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2064      	movs	r0, #100	@ 0x64
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	@ 0x32
 8002364:	4a15      	ldr	r2, [pc, #84]	@ (80023bc <UART_SetConfig+0x118>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002370:	4419      	add	r1, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f2f3 	udiv	r2, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <UART_SetConfig+0x118>)
 800238a:	fba3 0302 	umull	r0, r3, r3, r2
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2064      	movs	r0, #100	@ 0x64
 8002392:	fb00 f303 	mul.w	r3, r0, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	3332      	adds	r3, #50	@ 0x32
 800239c:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <UART_SetConfig+0x118>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	440a      	add	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40013800 	.word	0x40013800
 80023bc:	51eb851f 	.word	0x51eb851f

080023c0 <siprintf>:
 80023c0:	b40e      	push	{r1, r2, r3}
 80023c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80023c6:	b510      	push	{r4, lr}
 80023c8:	2400      	movs	r4, #0
 80023ca:	b09d      	sub	sp, #116	@ 0x74
 80023cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80023ce:	9002      	str	r0, [sp, #8]
 80023d0:	9006      	str	r0, [sp, #24]
 80023d2:	9107      	str	r1, [sp, #28]
 80023d4:	9104      	str	r1, [sp, #16]
 80023d6:	4809      	ldr	r0, [pc, #36]	@ (80023fc <siprintf+0x3c>)
 80023d8:	4909      	ldr	r1, [pc, #36]	@ (8002400 <siprintf+0x40>)
 80023da:	f853 2b04 	ldr.w	r2, [r3], #4
 80023de:	9105      	str	r1, [sp, #20]
 80023e0:	6800      	ldr	r0, [r0, #0]
 80023e2:	a902      	add	r1, sp, #8
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80023e8:	f000 f992 	bl	8002710 <_svfiprintf_r>
 80023ec:	9b02      	ldr	r3, [sp, #8]
 80023ee:	701c      	strb	r4, [r3, #0]
 80023f0:	b01d      	add	sp, #116	@ 0x74
 80023f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023f6:	b003      	add	sp, #12
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	ffff0208 	.word	0xffff0208

08002404 <memset>:
 8002404:	4603      	mov	r3, r0
 8002406:	4402      	add	r2, r0
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	f803 1b01 	strb.w	r1, [r3], #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <__errno>:
 8002414:	4b01      	ldr	r3, [pc, #4]	@ (800241c <__errno+0x8>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000000c 	.word	0x2000000c

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	2600      	movs	r6, #0
 8002424:	4d0c      	ldr	r5, [pc, #48]	@ (8002458 <__libc_init_array+0x38>)
 8002426:	4c0d      	ldr	r4, [pc, #52]	@ (800245c <__libc_init_array+0x3c>)
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	f000 fc76 	bl	8002d20 <_init>
 8002434:	2600      	movs	r6, #0
 8002436:	4d0a      	ldr	r5, [pc, #40]	@ (8002460 <__libc_init_array+0x40>)
 8002438:	4c0a      	ldr	r4, [pc, #40]	@ (8002464 <__libc_init_array+0x44>)
 800243a:	1b64      	subs	r4, r4, r5
 800243c:	10a4      	asrs	r4, r4, #2
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f855 3b04 	ldr.w	r3, [r5], #4
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	08002e64 	.word	0x08002e64
 800245c:	08002e64 	.word	0x08002e64
 8002460:	08002e64 	.word	0x08002e64
 8002464:	08002e68 	.word	0x08002e68

08002468 <__retarget_lock_acquire_recursive>:
 8002468:	4770      	bx	lr

0800246a <__retarget_lock_release_recursive>:
 800246a:	4770      	bx	lr

0800246c <_free_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4605      	mov	r5, r0
 8002470:	2900      	cmp	r1, #0
 8002472:	d040      	beq.n	80024f6 <_free_r+0x8a>
 8002474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002478:	1f0c      	subs	r4, r1, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfb8      	it	lt
 800247e:	18e4      	addlt	r4, r4, r3
 8002480:	f000 f8de 	bl	8002640 <__malloc_lock>
 8002484:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <_free_r+0x8c>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	b933      	cbnz	r3, 8002498 <_free_r+0x2c>
 800248a:	6063      	str	r3, [r4, #4]
 800248c:	6014      	str	r4, [r2, #0]
 800248e:	4628      	mov	r0, r5
 8002490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002494:	f000 b8da 	b.w	800264c <__malloc_unlock>
 8002498:	42a3      	cmp	r3, r4
 800249a:	d908      	bls.n	80024ae <_free_r+0x42>
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	1821      	adds	r1, r4, r0
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1809      	addeq	r1, r1, r0
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	e7ed      	b.n	800248a <_free_r+0x1e>
 80024ae:	461a      	mov	r2, r3
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b10b      	cbz	r3, 80024b8 <_free_r+0x4c>
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	d9fa      	bls.n	80024ae <_free_r+0x42>
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	1850      	adds	r0, r2, r1
 80024bc:	42a0      	cmp	r0, r4
 80024be:	d10b      	bne.n	80024d8 <_free_r+0x6c>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	4401      	add	r1, r0
 80024c4:	1850      	adds	r0, r2, r1
 80024c6:	4283      	cmp	r3, r0
 80024c8:	6011      	str	r1, [r2, #0]
 80024ca:	d1e0      	bne.n	800248e <_free_r+0x22>
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4408      	add	r0, r1
 80024d2:	6010      	str	r0, [r2, #0]
 80024d4:	6053      	str	r3, [r2, #4]
 80024d6:	e7da      	b.n	800248e <_free_r+0x22>
 80024d8:	d902      	bls.n	80024e0 <_free_r+0x74>
 80024da:	230c      	movs	r3, #12
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	e7d6      	b.n	800248e <_free_r+0x22>
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	1821      	adds	r1, r4, r0
 80024e4:	428b      	cmp	r3, r1
 80024e6:	bf01      	itttt	eq
 80024e8:	6819      	ldreq	r1, [r3, #0]
 80024ea:	685b      	ldreq	r3, [r3, #4]
 80024ec:	1809      	addeq	r1, r1, r0
 80024ee:	6021      	streq	r1, [r4, #0]
 80024f0:	6063      	str	r3, [r4, #4]
 80024f2:	6054      	str	r4, [r2, #4]
 80024f4:	e7cb      	b.n	800248e <_free_r+0x22>
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	20000224 	.word	0x20000224

080024fc <sbrk_aligned>:
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	4e0f      	ldr	r6, [pc, #60]	@ (800253c <sbrk_aligned+0x40>)
 8002500:	460c      	mov	r4, r1
 8002502:	6831      	ldr	r1, [r6, #0]
 8002504:	4605      	mov	r5, r0
 8002506:	b911      	cbnz	r1, 800250e <sbrk_aligned+0x12>
 8002508:	f000 fba8 	bl	8002c5c <_sbrk_r>
 800250c:	6030      	str	r0, [r6, #0]
 800250e:	4621      	mov	r1, r4
 8002510:	4628      	mov	r0, r5
 8002512:	f000 fba3 	bl	8002c5c <_sbrk_r>
 8002516:	1c43      	adds	r3, r0, #1
 8002518:	d103      	bne.n	8002522 <sbrk_aligned+0x26>
 800251a:	f04f 34ff 	mov.w	r4, #4294967295
 800251e:	4620      	mov	r0, r4
 8002520:	bd70      	pop	{r4, r5, r6, pc}
 8002522:	1cc4      	adds	r4, r0, #3
 8002524:	f024 0403 	bic.w	r4, r4, #3
 8002528:	42a0      	cmp	r0, r4
 800252a:	d0f8      	beq.n	800251e <sbrk_aligned+0x22>
 800252c:	1a21      	subs	r1, r4, r0
 800252e:	4628      	mov	r0, r5
 8002530:	f000 fb94 	bl	8002c5c <_sbrk_r>
 8002534:	3001      	adds	r0, #1
 8002536:	d1f2      	bne.n	800251e <sbrk_aligned+0x22>
 8002538:	e7ef      	b.n	800251a <sbrk_aligned+0x1e>
 800253a:	bf00      	nop
 800253c:	20000220 	.word	0x20000220

08002540 <_malloc_r>:
 8002540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002544:	1ccd      	adds	r5, r1, #3
 8002546:	f025 0503 	bic.w	r5, r5, #3
 800254a:	3508      	adds	r5, #8
 800254c:	2d0c      	cmp	r5, #12
 800254e:	bf38      	it	cc
 8002550:	250c      	movcc	r5, #12
 8002552:	2d00      	cmp	r5, #0
 8002554:	4606      	mov	r6, r0
 8002556:	db01      	blt.n	800255c <_malloc_r+0x1c>
 8002558:	42a9      	cmp	r1, r5
 800255a:	d904      	bls.n	8002566 <_malloc_r+0x26>
 800255c:	230c      	movs	r3, #12
 800255e:	6033      	str	r3, [r6, #0]
 8002560:	2000      	movs	r0, #0
 8002562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800263c <_malloc_r+0xfc>
 800256a:	f000 f869 	bl	8002640 <__malloc_lock>
 800256e:	f8d8 3000 	ldr.w	r3, [r8]
 8002572:	461c      	mov	r4, r3
 8002574:	bb44      	cbnz	r4, 80025c8 <_malloc_r+0x88>
 8002576:	4629      	mov	r1, r5
 8002578:	4630      	mov	r0, r6
 800257a:	f7ff ffbf 	bl	80024fc <sbrk_aligned>
 800257e:	1c43      	adds	r3, r0, #1
 8002580:	4604      	mov	r4, r0
 8002582:	d158      	bne.n	8002636 <_malloc_r+0xf6>
 8002584:	f8d8 4000 	ldr.w	r4, [r8]
 8002588:	4627      	mov	r7, r4
 800258a:	2f00      	cmp	r7, #0
 800258c:	d143      	bne.n	8002616 <_malloc_r+0xd6>
 800258e:	2c00      	cmp	r4, #0
 8002590:	d04b      	beq.n	800262a <_malloc_r+0xea>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	4639      	mov	r1, r7
 8002596:	4630      	mov	r0, r6
 8002598:	eb04 0903 	add.w	r9, r4, r3
 800259c:	f000 fb5e 	bl	8002c5c <_sbrk_r>
 80025a0:	4581      	cmp	r9, r0
 80025a2:	d142      	bne.n	800262a <_malloc_r+0xea>
 80025a4:	6821      	ldr	r1, [r4, #0]
 80025a6:	4630      	mov	r0, r6
 80025a8:	1a6d      	subs	r5, r5, r1
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7ff ffa6 	bl	80024fc <sbrk_aligned>
 80025b0:	3001      	adds	r0, #1
 80025b2:	d03a      	beq.n	800262a <_malloc_r+0xea>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	442b      	add	r3, r5
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	f8d8 3000 	ldr.w	r3, [r8]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	bb62      	cbnz	r2, 800261c <_malloc_r+0xdc>
 80025c2:	f8c8 7000 	str.w	r7, [r8]
 80025c6:	e00f      	b.n	80025e8 <_malloc_r+0xa8>
 80025c8:	6822      	ldr	r2, [r4, #0]
 80025ca:	1b52      	subs	r2, r2, r5
 80025cc:	d420      	bmi.n	8002610 <_malloc_r+0xd0>
 80025ce:	2a0b      	cmp	r2, #11
 80025d0:	d917      	bls.n	8002602 <_malloc_r+0xc2>
 80025d2:	1961      	adds	r1, r4, r5
 80025d4:	42a3      	cmp	r3, r4
 80025d6:	6025      	str	r5, [r4, #0]
 80025d8:	bf18      	it	ne
 80025da:	6059      	strne	r1, [r3, #4]
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	bf08      	it	eq
 80025e0:	f8c8 1000 	streq.w	r1, [r8]
 80025e4:	5162      	str	r2, [r4, r5]
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	4630      	mov	r0, r6
 80025ea:	f000 f82f 	bl	800264c <__malloc_unlock>
 80025ee:	f104 000b 	add.w	r0, r4, #11
 80025f2:	1d23      	adds	r3, r4, #4
 80025f4:	f020 0007 	bic.w	r0, r0, #7
 80025f8:	1ac2      	subs	r2, r0, r3
 80025fa:	bf1c      	itt	ne
 80025fc:	1a1b      	subne	r3, r3, r0
 80025fe:	50a3      	strne	r3, [r4, r2]
 8002600:	e7af      	b.n	8002562 <_malloc_r+0x22>
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	42a3      	cmp	r3, r4
 8002606:	bf0c      	ite	eq
 8002608:	f8c8 2000 	streq.w	r2, [r8]
 800260c:	605a      	strne	r2, [r3, #4]
 800260e:	e7eb      	b.n	80025e8 <_malloc_r+0xa8>
 8002610:	4623      	mov	r3, r4
 8002612:	6864      	ldr	r4, [r4, #4]
 8002614:	e7ae      	b.n	8002574 <_malloc_r+0x34>
 8002616:	463c      	mov	r4, r7
 8002618:	687f      	ldr	r7, [r7, #4]
 800261a:	e7b6      	b.n	800258a <_malloc_r+0x4a>
 800261c:	461a      	mov	r2, r3
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	42a3      	cmp	r3, r4
 8002622:	d1fb      	bne.n	800261c <_malloc_r+0xdc>
 8002624:	2300      	movs	r3, #0
 8002626:	6053      	str	r3, [r2, #4]
 8002628:	e7de      	b.n	80025e8 <_malloc_r+0xa8>
 800262a:	230c      	movs	r3, #12
 800262c:	4630      	mov	r0, r6
 800262e:	6033      	str	r3, [r6, #0]
 8002630:	f000 f80c 	bl	800264c <__malloc_unlock>
 8002634:	e794      	b.n	8002560 <_malloc_r+0x20>
 8002636:	6005      	str	r5, [r0, #0]
 8002638:	e7d6      	b.n	80025e8 <_malloc_r+0xa8>
 800263a:	bf00      	nop
 800263c:	20000224 	.word	0x20000224

08002640 <__malloc_lock>:
 8002640:	4801      	ldr	r0, [pc, #4]	@ (8002648 <__malloc_lock+0x8>)
 8002642:	f7ff bf11 	b.w	8002468 <__retarget_lock_acquire_recursive>
 8002646:	bf00      	nop
 8002648:	2000021c 	.word	0x2000021c

0800264c <__malloc_unlock>:
 800264c:	4801      	ldr	r0, [pc, #4]	@ (8002654 <__malloc_unlock+0x8>)
 800264e:	f7ff bf0c 	b.w	800246a <__retarget_lock_release_recursive>
 8002652:	bf00      	nop
 8002654:	2000021c 	.word	0x2000021c

08002658 <__ssputs_r>:
 8002658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800265c:	461f      	mov	r7, r3
 800265e:	688e      	ldr	r6, [r1, #8]
 8002660:	4682      	mov	sl, r0
 8002662:	42be      	cmp	r6, r7
 8002664:	460c      	mov	r4, r1
 8002666:	4690      	mov	r8, r2
 8002668:	680b      	ldr	r3, [r1, #0]
 800266a:	d82d      	bhi.n	80026c8 <__ssputs_r+0x70>
 800266c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002670:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002674:	d026      	beq.n	80026c4 <__ssputs_r+0x6c>
 8002676:	6965      	ldr	r5, [r4, #20]
 8002678:	6909      	ldr	r1, [r1, #16]
 800267a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800267e:	eba3 0901 	sub.w	r9, r3, r1
 8002682:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002686:	1c7b      	adds	r3, r7, #1
 8002688:	444b      	add	r3, r9
 800268a:	106d      	asrs	r5, r5, #1
 800268c:	429d      	cmp	r5, r3
 800268e:	bf38      	it	cc
 8002690:	461d      	movcc	r5, r3
 8002692:	0553      	lsls	r3, r2, #21
 8002694:	d527      	bpl.n	80026e6 <__ssputs_r+0x8e>
 8002696:	4629      	mov	r1, r5
 8002698:	f7ff ff52 	bl	8002540 <_malloc_r>
 800269c:	4606      	mov	r6, r0
 800269e:	b360      	cbz	r0, 80026fa <__ssputs_r+0xa2>
 80026a0:	464a      	mov	r2, r9
 80026a2:	6921      	ldr	r1, [r4, #16]
 80026a4:	f000 faf8 	bl	8002c98 <memcpy>
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80026ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	6126      	str	r6, [r4, #16]
 80026b6:	444e      	add	r6, r9
 80026b8:	6026      	str	r6, [r4, #0]
 80026ba:	463e      	mov	r6, r7
 80026bc:	6165      	str	r5, [r4, #20]
 80026be:	eba5 0509 	sub.w	r5, r5, r9
 80026c2:	60a5      	str	r5, [r4, #8]
 80026c4:	42be      	cmp	r6, r7
 80026c6:	d900      	bls.n	80026ca <__ssputs_r+0x72>
 80026c8:	463e      	mov	r6, r7
 80026ca:	4632      	mov	r2, r6
 80026cc:	4641      	mov	r1, r8
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	f000 faaa 	bl	8002c28 <memmove>
 80026d4:	2000      	movs	r0, #0
 80026d6:	68a3      	ldr	r3, [r4, #8]
 80026d8:	1b9b      	subs	r3, r3, r6
 80026da:	60a3      	str	r3, [r4, #8]
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	4433      	add	r3, r6
 80026e0:	6023      	str	r3, [r4, #0]
 80026e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e6:	462a      	mov	r2, r5
 80026e8:	f000 fae4 	bl	8002cb4 <_realloc_r>
 80026ec:	4606      	mov	r6, r0
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d1e0      	bne.n	80026b4 <__ssputs_r+0x5c>
 80026f2:	4650      	mov	r0, sl
 80026f4:	6921      	ldr	r1, [r4, #16]
 80026f6:	f7ff feb9 	bl	800246c <_free_r>
 80026fa:	230c      	movs	r3, #12
 80026fc:	f8ca 3000 	str.w	r3, [sl]
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	f04f 30ff 	mov.w	r0, #4294967295
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	81a3      	strh	r3, [r4, #12]
 800270c:	e7e9      	b.n	80026e2 <__ssputs_r+0x8a>
	...

08002710 <_svfiprintf_r>:
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	4698      	mov	r8, r3
 8002716:	898b      	ldrh	r3, [r1, #12]
 8002718:	4607      	mov	r7, r0
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	460d      	mov	r5, r1
 800271e:	4614      	mov	r4, r2
 8002720:	b09d      	sub	sp, #116	@ 0x74
 8002722:	d510      	bpl.n	8002746 <_svfiprintf_r+0x36>
 8002724:	690b      	ldr	r3, [r1, #16]
 8002726:	b973      	cbnz	r3, 8002746 <_svfiprintf_r+0x36>
 8002728:	2140      	movs	r1, #64	@ 0x40
 800272a:	f7ff ff09 	bl	8002540 <_malloc_r>
 800272e:	6028      	str	r0, [r5, #0]
 8002730:	6128      	str	r0, [r5, #16]
 8002732:	b930      	cbnz	r0, 8002742 <_svfiprintf_r+0x32>
 8002734:	230c      	movs	r3, #12
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	b01d      	add	sp, #116	@ 0x74
 800273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002742:	2340      	movs	r3, #64	@ 0x40
 8002744:	616b      	str	r3, [r5, #20]
 8002746:	2300      	movs	r3, #0
 8002748:	9309      	str	r3, [sp, #36]	@ 0x24
 800274a:	2320      	movs	r3, #32
 800274c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002750:	2330      	movs	r3, #48	@ 0x30
 8002752:	f04f 0901 	mov.w	r9, #1
 8002756:	f8cd 800c 	str.w	r8, [sp, #12]
 800275a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80028f4 <_svfiprintf_r+0x1e4>
 800275e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002762:	4623      	mov	r3, r4
 8002764:	469a      	mov	sl, r3
 8002766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800276a:	b10a      	cbz	r2, 8002770 <_svfiprintf_r+0x60>
 800276c:	2a25      	cmp	r2, #37	@ 0x25
 800276e:	d1f9      	bne.n	8002764 <_svfiprintf_r+0x54>
 8002770:	ebba 0b04 	subs.w	fp, sl, r4
 8002774:	d00b      	beq.n	800278e <_svfiprintf_r+0x7e>
 8002776:	465b      	mov	r3, fp
 8002778:	4622      	mov	r2, r4
 800277a:	4629      	mov	r1, r5
 800277c:	4638      	mov	r0, r7
 800277e:	f7ff ff6b 	bl	8002658 <__ssputs_r>
 8002782:	3001      	adds	r0, #1
 8002784:	f000 80a7 	beq.w	80028d6 <_svfiprintf_r+0x1c6>
 8002788:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800278a:	445a      	add	r2, fp
 800278c:	9209      	str	r2, [sp, #36]	@ 0x24
 800278e:	f89a 3000 	ldrb.w	r3, [sl]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 809f 	beq.w	80028d6 <_svfiprintf_r+0x1c6>
 8002798:	2300      	movs	r3, #0
 800279a:	f04f 32ff 	mov.w	r2, #4294967295
 800279e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027a2:	f10a 0a01 	add.w	sl, sl, #1
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	9307      	str	r3, [sp, #28]
 80027aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80027b0:	4654      	mov	r4, sl
 80027b2:	2205      	movs	r2, #5
 80027b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b8:	484e      	ldr	r0, [pc, #312]	@ (80028f4 <_svfiprintf_r+0x1e4>)
 80027ba:	f000 fa5f 	bl	8002c7c <memchr>
 80027be:	9a04      	ldr	r2, [sp, #16]
 80027c0:	b9d8      	cbnz	r0, 80027fa <_svfiprintf_r+0xea>
 80027c2:	06d0      	lsls	r0, r2, #27
 80027c4:	bf44      	itt	mi
 80027c6:	2320      	movmi	r3, #32
 80027c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027cc:	0711      	lsls	r1, r2, #28
 80027ce:	bf44      	itt	mi
 80027d0:	232b      	movmi	r3, #43	@ 0x2b
 80027d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027d6:	f89a 3000 	ldrb.w	r3, [sl]
 80027da:	2b2a      	cmp	r3, #42	@ 0x2a
 80027dc:	d015      	beq.n	800280a <_svfiprintf_r+0xfa>
 80027de:	4654      	mov	r4, sl
 80027e0:	2000      	movs	r0, #0
 80027e2:	f04f 0c0a 	mov.w	ip, #10
 80027e6:	9a07      	ldr	r2, [sp, #28]
 80027e8:	4621      	mov	r1, r4
 80027ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027ee:	3b30      	subs	r3, #48	@ 0x30
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d94b      	bls.n	800288c <_svfiprintf_r+0x17c>
 80027f4:	b1b0      	cbz	r0, 8002824 <_svfiprintf_r+0x114>
 80027f6:	9207      	str	r2, [sp, #28]
 80027f8:	e014      	b.n	8002824 <_svfiprintf_r+0x114>
 80027fa:	eba0 0308 	sub.w	r3, r0, r8
 80027fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	46a2      	mov	sl, r4
 8002806:	9304      	str	r3, [sp, #16]
 8002808:	e7d2      	b.n	80027b0 <_svfiprintf_r+0xa0>
 800280a:	9b03      	ldr	r3, [sp, #12]
 800280c:	1d19      	adds	r1, r3, #4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	9103      	str	r1, [sp, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	bfbb      	ittet	lt
 8002816:	425b      	neglt	r3, r3
 8002818:	f042 0202 	orrlt.w	r2, r2, #2
 800281c:	9307      	strge	r3, [sp, #28]
 800281e:	9307      	strlt	r3, [sp, #28]
 8002820:	bfb8      	it	lt
 8002822:	9204      	strlt	r2, [sp, #16]
 8002824:	7823      	ldrb	r3, [r4, #0]
 8002826:	2b2e      	cmp	r3, #46	@ 0x2e
 8002828:	d10a      	bne.n	8002840 <_svfiprintf_r+0x130>
 800282a:	7863      	ldrb	r3, [r4, #1]
 800282c:	2b2a      	cmp	r3, #42	@ 0x2a
 800282e:	d132      	bne.n	8002896 <_svfiprintf_r+0x186>
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	3402      	adds	r4, #2
 8002834:	1d1a      	adds	r2, r3, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	9203      	str	r2, [sp, #12]
 800283a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800283e:	9305      	str	r3, [sp, #20]
 8002840:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80028f8 <_svfiprintf_r+0x1e8>
 8002844:	2203      	movs	r2, #3
 8002846:	4650      	mov	r0, sl
 8002848:	7821      	ldrb	r1, [r4, #0]
 800284a:	f000 fa17 	bl	8002c7c <memchr>
 800284e:	b138      	cbz	r0, 8002860 <_svfiprintf_r+0x150>
 8002850:	2240      	movs	r2, #64	@ 0x40
 8002852:	9b04      	ldr	r3, [sp, #16]
 8002854:	eba0 000a 	sub.w	r0, r0, sl
 8002858:	4082      	lsls	r2, r0
 800285a:	4313      	orrs	r3, r2
 800285c:	3401      	adds	r4, #1
 800285e:	9304      	str	r3, [sp, #16]
 8002860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002864:	2206      	movs	r2, #6
 8002866:	4825      	ldr	r0, [pc, #148]	@ (80028fc <_svfiprintf_r+0x1ec>)
 8002868:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800286c:	f000 fa06 	bl	8002c7c <memchr>
 8002870:	2800      	cmp	r0, #0
 8002872:	d036      	beq.n	80028e2 <_svfiprintf_r+0x1d2>
 8002874:	4b22      	ldr	r3, [pc, #136]	@ (8002900 <_svfiprintf_r+0x1f0>)
 8002876:	bb1b      	cbnz	r3, 80028c0 <_svfiprintf_r+0x1b0>
 8002878:	9b03      	ldr	r3, [sp, #12]
 800287a:	3307      	adds	r3, #7
 800287c:	f023 0307 	bic.w	r3, r3, #7
 8002880:	3308      	adds	r3, #8
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002886:	4433      	add	r3, r6
 8002888:	9309      	str	r3, [sp, #36]	@ 0x24
 800288a:	e76a      	b.n	8002762 <_svfiprintf_r+0x52>
 800288c:	460c      	mov	r4, r1
 800288e:	2001      	movs	r0, #1
 8002890:	fb0c 3202 	mla	r2, ip, r2, r3
 8002894:	e7a8      	b.n	80027e8 <_svfiprintf_r+0xd8>
 8002896:	2300      	movs	r3, #0
 8002898:	f04f 0c0a 	mov.w	ip, #10
 800289c:	4619      	mov	r1, r3
 800289e:	3401      	adds	r4, #1
 80028a0:	9305      	str	r3, [sp, #20]
 80028a2:	4620      	mov	r0, r4
 80028a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028a8:	3a30      	subs	r2, #48	@ 0x30
 80028aa:	2a09      	cmp	r2, #9
 80028ac:	d903      	bls.n	80028b6 <_svfiprintf_r+0x1a6>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0c6      	beq.n	8002840 <_svfiprintf_r+0x130>
 80028b2:	9105      	str	r1, [sp, #20]
 80028b4:	e7c4      	b.n	8002840 <_svfiprintf_r+0x130>
 80028b6:	4604      	mov	r4, r0
 80028b8:	2301      	movs	r3, #1
 80028ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80028be:	e7f0      	b.n	80028a2 <_svfiprintf_r+0x192>
 80028c0:	ab03      	add	r3, sp, #12
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	462a      	mov	r2, r5
 80028c6:	4638      	mov	r0, r7
 80028c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <_svfiprintf_r+0x1f4>)
 80028ca:	a904      	add	r1, sp, #16
 80028cc:	f3af 8000 	nop.w
 80028d0:	1c42      	adds	r2, r0, #1
 80028d2:	4606      	mov	r6, r0
 80028d4:	d1d6      	bne.n	8002884 <_svfiprintf_r+0x174>
 80028d6:	89ab      	ldrh	r3, [r5, #12]
 80028d8:	065b      	lsls	r3, r3, #25
 80028da:	f53f af2d 	bmi.w	8002738 <_svfiprintf_r+0x28>
 80028de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028e0:	e72c      	b.n	800273c <_svfiprintf_r+0x2c>
 80028e2:	ab03      	add	r3, sp, #12
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	462a      	mov	r2, r5
 80028e8:	4638      	mov	r0, r7
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <_svfiprintf_r+0x1f4>)
 80028ec:	a904      	add	r1, sp, #16
 80028ee:	f000 f87d 	bl	80029ec <_printf_i>
 80028f2:	e7ed      	b.n	80028d0 <_svfiprintf_r+0x1c0>
 80028f4:	08002e26 	.word	0x08002e26
 80028f8:	08002e2c 	.word	0x08002e2c
 80028fc:	08002e30 	.word	0x08002e30
 8002900:	00000000 	.word	0x00000000
 8002904:	08002659 	.word	0x08002659

08002908 <_printf_common>:
 8002908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800290c:	4616      	mov	r6, r2
 800290e:	4698      	mov	r8, r3
 8002910:	688a      	ldr	r2, [r1, #8]
 8002912:	690b      	ldr	r3, [r1, #16]
 8002914:	4607      	mov	r7, r0
 8002916:	4293      	cmp	r3, r2
 8002918:	bfb8      	it	lt
 800291a:	4613      	movlt	r3, r2
 800291c:	6033      	str	r3, [r6, #0]
 800291e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002922:	460c      	mov	r4, r1
 8002924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002928:	b10a      	cbz	r2, 800292e <_printf_common+0x26>
 800292a:	3301      	adds	r3, #1
 800292c:	6033      	str	r3, [r6, #0]
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	0699      	lsls	r1, r3, #26
 8002932:	bf42      	ittt	mi
 8002934:	6833      	ldrmi	r3, [r6, #0]
 8002936:	3302      	addmi	r3, #2
 8002938:	6033      	strmi	r3, [r6, #0]
 800293a:	6825      	ldr	r5, [r4, #0]
 800293c:	f015 0506 	ands.w	r5, r5, #6
 8002940:	d106      	bne.n	8002950 <_printf_common+0x48>
 8002942:	f104 0a19 	add.w	sl, r4, #25
 8002946:	68e3      	ldr	r3, [r4, #12]
 8002948:	6832      	ldr	r2, [r6, #0]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	42ab      	cmp	r3, r5
 800294e:	dc2b      	bgt.n	80029a8 <_printf_common+0xa0>
 8002950:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002954:	6822      	ldr	r2, [r4, #0]
 8002956:	3b00      	subs	r3, #0
 8002958:	bf18      	it	ne
 800295a:	2301      	movne	r3, #1
 800295c:	0692      	lsls	r2, r2, #26
 800295e:	d430      	bmi.n	80029c2 <_printf_common+0xba>
 8002960:	4641      	mov	r1, r8
 8002962:	4638      	mov	r0, r7
 8002964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002968:	47c8      	blx	r9
 800296a:	3001      	adds	r0, #1
 800296c:	d023      	beq.n	80029b6 <_printf_common+0xae>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	6922      	ldr	r2, [r4, #16]
 8002972:	f003 0306 	and.w	r3, r3, #6
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf14      	ite	ne
 800297a:	2500      	movne	r5, #0
 800297c:	6833      	ldreq	r3, [r6, #0]
 800297e:	f04f 0600 	mov.w	r6, #0
 8002982:	bf08      	it	eq
 8002984:	68e5      	ldreq	r5, [r4, #12]
 8002986:	f104 041a 	add.w	r4, r4, #26
 800298a:	bf08      	it	eq
 800298c:	1aed      	subeq	r5, r5, r3
 800298e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002992:	bf08      	it	eq
 8002994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002998:	4293      	cmp	r3, r2
 800299a:	bfc4      	itt	gt
 800299c:	1a9b      	subgt	r3, r3, r2
 800299e:	18ed      	addgt	r5, r5, r3
 80029a0:	42b5      	cmp	r5, r6
 80029a2:	d11a      	bne.n	80029da <_printf_common+0xd2>
 80029a4:	2000      	movs	r0, #0
 80029a6:	e008      	b.n	80029ba <_printf_common+0xb2>
 80029a8:	2301      	movs	r3, #1
 80029aa:	4652      	mov	r2, sl
 80029ac:	4641      	mov	r1, r8
 80029ae:	4638      	mov	r0, r7
 80029b0:	47c8      	blx	r9
 80029b2:	3001      	adds	r0, #1
 80029b4:	d103      	bne.n	80029be <_printf_common+0xb6>
 80029b6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029be:	3501      	adds	r5, #1
 80029c0:	e7c1      	b.n	8002946 <_printf_common+0x3e>
 80029c2:	2030      	movs	r0, #48	@ 0x30
 80029c4:	18e1      	adds	r1, r4, r3
 80029c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029d0:	4422      	add	r2, r4
 80029d2:	3302      	adds	r3, #2
 80029d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029d8:	e7c2      	b.n	8002960 <_printf_common+0x58>
 80029da:	2301      	movs	r3, #1
 80029dc:	4622      	mov	r2, r4
 80029de:	4641      	mov	r1, r8
 80029e0:	4638      	mov	r0, r7
 80029e2:	47c8      	blx	r9
 80029e4:	3001      	adds	r0, #1
 80029e6:	d0e6      	beq.n	80029b6 <_printf_common+0xae>
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7d9      	b.n	80029a0 <_printf_common+0x98>

080029ec <_printf_i>:
 80029ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029f0:	7e0f      	ldrb	r7, [r1, #24]
 80029f2:	4691      	mov	r9, r2
 80029f4:	2f78      	cmp	r7, #120	@ 0x78
 80029f6:	4680      	mov	r8, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	469a      	mov	sl, r3
 80029fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a02:	d807      	bhi.n	8002a14 <_printf_i+0x28>
 8002a04:	2f62      	cmp	r7, #98	@ 0x62
 8002a06:	d80a      	bhi.n	8002a1e <_printf_i+0x32>
 8002a08:	2f00      	cmp	r7, #0
 8002a0a:	f000 80d1 	beq.w	8002bb0 <_printf_i+0x1c4>
 8002a0e:	2f58      	cmp	r7, #88	@ 0x58
 8002a10:	f000 80b8 	beq.w	8002b84 <_printf_i+0x198>
 8002a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a1c:	e03a      	b.n	8002a94 <_printf_i+0xa8>
 8002a1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a22:	2b15      	cmp	r3, #21
 8002a24:	d8f6      	bhi.n	8002a14 <_printf_i+0x28>
 8002a26:	a101      	add	r1, pc, #4	@ (adr r1, 8002a2c <_printf_i+0x40>)
 8002a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a2c:	08002a85 	.word	0x08002a85
 8002a30:	08002a99 	.word	0x08002a99
 8002a34:	08002a15 	.word	0x08002a15
 8002a38:	08002a15 	.word	0x08002a15
 8002a3c:	08002a15 	.word	0x08002a15
 8002a40:	08002a15 	.word	0x08002a15
 8002a44:	08002a99 	.word	0x08002a99
 8002a48:	08002a15 	.word	0x08002a15
 8002a4c:	08002a15 	.word	0x08002a15
 8002a50:	08002a15 	.word	0x08002a15
 8002a54:	08002a15 	.word	0x08002a15
 8002a58:	08002b97 	.word	0x08002b97
 8002a5c:	08002ac3 	.word	0x08002ac3
 8002a60:	08002b51 	.word	0x08002b51
 8002a64:	08002a15 	.word	0x08002a15
 8002a68:	08002a15 	.word	0x08002a15
 8002a6c:	08002bb9 	.word	0x08002bb9
 8002a70:	08002a15 	.word	0x08002a15
 8002a74:	08002ac3 	.word	0x08002ac3
 8002a78:	08002a15 	.word	0x08002a15
 8002a7c:	08002a15 	.word	0x08002a15
 8002a80:	08002b59 	.word	0x08002b59
 8002a84:	6833      	ldr	r3, [r6, #0]
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6032      	str	r2, [r6, #0]
 8002a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a94:	2301      	movs	r3, #1
 8002a96:	e09c      	b.n	8002bd2 <_printf_i+0x1e6>
 8002a98:	6833      	ldr	r3, [r6, #0]
 8002a9a:	6820      	ldr	r0, [r4, #0]
 8002a9c:	1d19      	adds	r1, r3, #4
 8002a9e:	6031      	str	r1, [r6, #0]
 8002aa0:	0606      	lsls	r6, r0, #24
 8002aa2:	d501      	bpl.n	8002aa8 <_printf_i+0xbc>
 8002aa4:	681d      	ldr	r5, [r3, #0]
 8002aa6:	e003      	b.n	8002ab0 <_printf_i+0xc4>
 8002aa8:	0645      	lsls	r5, r0, #25
 8002aaa:	d5fb      	bpl.n	8002aa4 <_printf_i+0xb8>
 8002aac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ab0:	2d00      	cmp	r5, #0
 8002ab2:	da03      	bge.n	8002abc <_printf_i+0xd0>
 8002ab4:	232d      	movs	r3, #45	@ 0x2d
 8002ab6:	426d      	negs	r5, r5
 8002ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002abc:	230a      	movs	r3, #10
 8002abe:	4858      	ldr	r0, [pc, #352]	@ (8002c20 <_printf_i+0x234>)
 8002ac0:	e011      	b.n	8002ae6 <_printf_i+0xfa>
 8002ac2:	6821      	ldr	r1, [r4, #0]
 8002ac4:	6833      	ldr	r3, [r6, #0]
 8002ac6:	0608      	lsls	r0, r1, #24
 8002ac8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002acc:	d402      	bmi.n	8002ad4 <_printf_i+0xe8>
 8002ace:	0649      	lsls	r1, r1, #25
 8002ad0:	bf48      	it	mi
 8002ad2:	b2ad      	uxthmi	r5, r5
 8002ad4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ad6:	6033      	str	r3, [r6, #0]
 8002ad8:	bf14      	ite	ne
 8002ada:	230a      	movne	r3, #10
 8002adc:	2308      	moveq	r3, #8
 8002ade:	4850      	ldr	r0, [pc, #320]	@ (8002c20 <_printf_i+0x234>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ae6:	6866      	ldr	r6, [r4, #4]
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	60a6      	str	r6, [r4, #8]
 8002aec:	db05      	blt.n	8002afa <_printf_i+0x10e>
 8002aee:	6821      	ldr	r1, [r4, #0]
 8002af0:	432e      	orrs	r6, r5
 8002af2:	f021 0104 	bic.w	r1, r1, #4
 8002af6:	6021      	str	r1, [r4, #0]
 8002af8:	d04b      	beq.n	8002b92 <_printf_i+0x1a6>
 8002afa:	4616      	mov	r6, r2
 8002afc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b00:	fb03 5711 	mls	r7, r3, r1, r5
 8002b04:	5dc7      	ldrb	r7, [r0, r7]
 8002b06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b0a:	462f      	mov	r7, r5
 8002b0c:	42bb      	cmp	r3, r7
 8002b0e:	460d      	mov	r5, r1
 8002b10:	d9f4      	bls.n	8002afc <_printf_i+0x110>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d10b      	bne.n	8002b2e <_printf_i+0x142>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	07df      	lsls	r7, r3, #31
 8002b1a:	d508      	bpl.n	8002b2e <_printf_i+0x142>
 8002b1c:	6923      	ldr	r3, [r4, #16]
 8002b1e:	6861      	ldr	r1, [r4, #4]
 8002b20:	4299      	cmp	r1, r3
 8002b22:	bfde      	ittt	le
 8002b24:	2330      	movle	r3, #48	@ 0x30
 8002b26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b2e:	1b92      	subs	r2, r2, r6
 8002b30:	6122      	str	r2, [r4, #16]
 8002b32:	464b      	mov	r3, r9
 8002b34:	4621      	mov	r1, r4
 8002b36:	4640      	mov	r0, r8
 8002b38:	f8cd a000 	str.w	sl, [sp]
 8002b3c:	aa03      	add	r2, sp, #12
 8002b3e:	f7ff fee3 	bl	8002908 <_printf_common>
 8002b42:	3001      	adds	r0, #1
 8002b44:	d14a      	bne.n	8002bdc <_printf_i+0x1f0>
 8002b46:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4a:	b004      	add	sp, #16
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	f043 0320 	orr.w	r3, r3, #32
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	2778      	movs	r7, #120	@ 0x78
 8002b5a:	4832      	ldr	r0, [pc, #200]	@ (8002c24 <_printf_i+0x238>)
 8002b5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	6831      	ldr	r1, [r6, #0]
 8002b64:	061f      	lsls	r7, r3, #24
 8002b66:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b6a:	d402      	bmi.n	8002b72 <_printf_i+0x186>
 8002b6c:	065f      	lsls	r7, r3, #25
 8002b6e:	bf48      	it	mi
 8002b70:	b2ad      	uxthmi	r5, r5
 8002b72:	6031      	str	r1, [r6, #0]
 8002b74:	07d9      	lsls	r1, r3, #31
 8002b76:	bf44      	itt	mi
 8002b78:	f043 0320 	orrmi.w	r3, r3, #32
 8002b7c:	6023      	strmi	r3, [r4, #0]
 8002b7e:	b11d      	cbz	r5, 8002b88 <_printf_i+0x19c>
 8002b80:	2310      	movs	r3, #16
 8002b82:	e7ad      	b.n	8002ae0 <_printf_i+0xf4>
 8002b84:	4826      	ldr	r0, [pc, #152]	@ (8002c20 <_printf_i+0x234>)
 8002b86:	e7e9      	b.n	8002b5c <_printf_i+0x170>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	f023 0320 	bic.w	r3, r3, #32
 8002b8e:	6023      	str	r3, [r4, #0]
 8002b90:	e7f6      	b.n	8002b80 <_printf_i+0x194>
 8002b92:	4616      	mov	r6, r2
 8002b94:	e7bd      	b.n	8002b12 <_printf_i+0x126>
 8002b96:	6833      	ldr	r3, [r6, #0]
 8002b98:	6825      	ldr	r5, [r4, #0]
 8002b9a:	1d18      	adds	r0, r3, #4
 8002b9c:	6961      	ldr	r1, [r4, #20]
 8002b9e:	6030      	str	r0, [r6, #0]
 8002ba0:	062e      	lsls	r6, r5, #24
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	d501      	bpl.n	8002baa <_printf_i+0x1be>
 8002ba6:	6019      	str	r1, [r3, #0]
 8002ba8:	e002      	b.n	8002bb0 <_printf_i+0x1c4>
 8002baa:	0668      	lsls	r0, r5, #25
 8002bac:	d5fb      	bpl.n	8002ba6 <_printf_i+0x1ba>
 8002bae:	8019      	strh	r1, [r3, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4616      	mov	r6, r2
 8002bb4:	6123      	str	r3, [r4, #16]
 8002bb6:	e7bc      	b.n	8002b32 <_printf_i+0x146>
 8002bb8:	6833      	ldr	r3, [r6, #0]
 8002bba:	2100      	movs	r1, #0
 8002bbc:	1d1a      	adds	r2, r3, #4
 8002bbe:	6032      	str	r2, [r6, #0]
 8002bc0:	681e      	ldr	r6, [r3, #0]
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f000 f859 	bl	8002c7c <memchr>
 8002bca:	b108      	cbz	r0, 8002bd0 <_printf_i+0x1e4>
 8002bcc:	1b80      	subs	r0, r0, r6
 8002bce:	6060      	str	r0, [r4, #4]
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	6123      	str	r3, [r4, #16]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bda:	e7aa      	b.n	8002b32 <_printf_i+0x146>
 8002bdc:	4632      	mov	r2, r6
 8002bde:	4649      	mov	r1, r9
 8002be0:	4640      	mov	r0, r8
 8002be2:	6923      	ldr	r3, [r4, #16]
 8002be4:	47d0      	blx	sl
 8002be6:	3001      	adds	r0, #1
 8002be8:	d0ad      	beq.n	8002b46 <_printf_i+0x15a>
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	079b      	lsls	r3, r3, #30
 8002bee:	d413      	bmi.n	8002c18 <_printf_i+0x22c>
 8002bf0:	68e0      	ldr	r0, [r4, #12]
 8002bf2:	9b03      	ldr	r3, [sp, #12]
 8002bf4:	4298      	cmp	r0, r3
 8002bf6:	bfb8      	it	lt
 8002bf8:	4618      	movlt	r0, r3
 8002bfa:	e7a6      	b.n	8002b4a <_printf_i+0x15e>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4632      	mov	r2, r6
 8002c00:	4649      	mov	r1, r9
 8002c02:	4640      	mov	r0, r8
 8002c04:	47d0      	blx	sl
 8002c06:	3001      	adds	r0, #1
 8002c08:	d09d      	beq.n	8002b46 <_printf_i+0x15a>
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	68e3      	ldr	r3, [r4, #12]
 8002c0e:	9903      	ldr	r1, [sp, #12]
 8002c10:	1a5b      	subs	r3, r3, r1
 8002c12:	42ab      	cmp	r3, r5
 8002c14:	dcf2      	bgt.n	8002bfc <_printf_i+0x210>
 8002c16:	e7eb      	b.n	8002bf0 <_printf_i+0x204>
 8002c18:	2500      	movs	r5, #0
 8002c1a:	f104 0619 	add.w	r6, r4, #25
 8002c1e:	e7f5      	b.n	8002c0c <_printf_i+0x220>
 8002c20:	08002e37 	.word	0x08002e37
 8002c24:	08002e48 	.word	0x08002e48

08002c28 <memmove>:
 8002c28:	4288      	cmp	r0, r1
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	eb01 0402 	add.w	r4, r1, r2
 8002c30:	d902      	bls.n	8002c38 <memmove+0x10>
 8002c32:	4284      	cmp	r4, r0
 8002c34:	4623      	mov	r3, r4
 8002c36:	d807      	bhi.n	8002c48 <memmove+0x20>
 8002c38:	1e43      	subs	r3, r0, #1
 8002c3a:	42a1      	cmp	r1, r4
 8002c3c:	d008      	beq.n	8002c50 <memmove+0x28>
 8002c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c46:	e7f8      	b.n	8002c3a <memmove+0x12>
 8002c48:	4601      	mov	r1, r0
 8002c4a:	4402      	add	r2, r0
 8002c4c:	428a      	cmp	r2, r1
 8002c4e:	d100      	bne.n	8002c52 <memmove+0x2a>
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c5a:	e7f7      	b.n	8002c4c <memmove+0x24>

08002c5c <_sbrk_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	2300      	movs	r3, #0
 8002c60:	4d05      	ldr	r5, [pc, #20]	@ (8002c78 <_sbrk_r+0x1c>)
 8002c62:	4604      	mov	r4, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fd fcf4 	bl	8000654 <_sbrk>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d102      	bne.n	8002c76 <_sbrk_r+0x1a>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	b103      	cbz	r3, 8002c76 <_sbrk_r+0x1a>
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	20000218 	.word	0x20000218

08002c7c <memchr>:
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b510      	push	{r4, lr}
 8002c80:	b2c9      	uxtb	r1, r1
 8002c82:	4402      	add	r2, r0
 8002c84:	4293      	cmp	r3, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	d101      	bne.n	8002c8e <memchr+0x12>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	e003      	b.n	8002c96 <memchr+0x1a>
 8002c8e:	7804      	ldrb	r4, [r0, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	428c      	cmp	r4, r1
 8002c94:	d1f6      	bne.n	8002c84 <memchr+0x8>
 8002c96:	bd10      	pop	{r4, pc}

08002c98 <memcpy>:
 8002c98:	440a      	add	r2, r1
 8002c9a:	4291      	cmp	r1, r2
 8002c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ca0:	d100      	bne.n	8002ca4 <memcpy+0xc>
 8002ca2:	4770      	bx	lr
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002caa:	4291      	cmp	r1, r2
 8002cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cb0:	d1f9      	bne.n	8002ca6 <memcpy+0xe>
 8002cb2:	bd10      	pop	{r4, pc}

08002cb4 <_realloc_r>:
 8002cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb8:	4607      	mov	r7, r0
 8002cba:	4614      	mov	r4, r2
 8002cbc:	460d      	mov	r5, r1
 8002cbe:	b921      	cbnz	r1, 8002cca <_realloc_r+0x16>
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc6:	f7ff bc3b 	b.w	8002540 <_malloc_r>
 8002cca:	b92a      	cbnz	r2, 8002cd8 <_realloc_r+0x24>
 8002ccc:	f7ff fbce 	bl	800246c <_free_r>
 8002cd0:	4625      	mov	r5, r4
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cd8:	f000 f81a 	bl	8002d10 <_malloc_usable_size_r>
 8002cdc:	4284      	cmp	r4, r0
 8002cde:	4606      	mov	r6, r0
 8002ce0:	d802      	bhi.n	8002ce8 <_realloc_r+0x34>
 8002ce2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ce6:	d8f4      	bhi.n	8002cd2 <_realloc_r+0x1e>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4638      	mov	r0, r7
 8002cec:	f7ff fc28 	bl	8002540 <_malloc_r>
 8002cf0:	4680      	mov	r8, r0
 8002cf2:	b908      	cbnz	r0, 8002cf8 <_realloc_r+0x44>
 8002cf4:	4645      	mov	r5, r8
 8002cf6:	e7ec      	b.n	8002cd2 <_realloc_r+0x1e>
 8002cf8:	42b4      	cmp	r4, r6
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	bf28      	it	cs
 8002d00:	4632      	movcs	r2, r6
 8002d02:	f7ff ffc9 	bl	8002c98 <memcpy>
 8002d06:	4629      	mov	r1, r5
 8002d08:	4638      	mov	r0, r7
 8002d0a:	f7ff fbaf 	bl	800246c <_free_r>
 8002d0e:	e7f1      	b.n	8002cf4 <_realloc_r+0x40>

08002d10 <_malloc_usable_size_r>:
 8002d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d14:	1f18      	subs	r0, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfbc      	itt	lt
 8002d1a:	580b      	ldrlt	r3, [r1, r0]
 8002d1c:	18c0      	addlt	r0, r0, r3
 8002d1e:	4770      	bx	lr

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
